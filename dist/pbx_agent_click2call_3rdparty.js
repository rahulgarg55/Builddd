var Event=require("./events"),cfg=require("../../pbx_config"),pbx_db=require("./pbx_db"),pbx_api=require("./api/pbx_api"),pbx_logger=require("./logger/pbx_logger"),agent_processor=require("./agent_processor"),express=require("express"),dt=require("./common/datetime"),awsS3=require("./s3/awsS3"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv"),logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,awsS3=new awsS3,dbOutput="",dbSMEid="",api=new pbx_api;function AgentClick2Call(_){this.state_name="agent_c2c_3rdparty",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Current State ["+_.currentState+"] Update to ==> [dialing]"),_.currentState="dialing",_.dialStatus="NOANSWER";_.totalHoldDuration=0,this.enter=function(){var e;new pbx_db,_.callcdrMode="22",_.callDirection="OUTGOING",_.callDirectionStatus="1",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Entering agent_c2c_3rdparty: agent_c2c_3rdparty"),_.channel.on("ChannelHangupRequest",a),_.client.on("PlaybackFinished",function e(n){logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","on_playback_finished");"WAITING_AGENT_C2C_DATA"==_.user_ivr_state?(_.client.removeListener("PlaybackFinished",e),_.client.removeListener("ChannelHangupRequest",a),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","FSM State Changed [TO => AGENT_C2C]"),_.state_machine.change_state(Event.AGENT_C2C)):"AGENT_C2C_TRY_LATER"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","AGENT_C2C_TRY_LATER so let kill the agent app side."),_.client.removeListener("PlaybackFinished",e),d(_.channel,_.agentChannel),setTimeout(d,1100,_.channel,_.agentChannel)):"PLAY_BUSSY"!=_.user_ivr_state&&"PLAY_BUSSY_SWITCHEDOFF"!=_.user_ivr_state&&"PLAY_SWITCHEDOFF_NOTRESPONDING"!=_.user_ivr_state&&"PLAY_NOT_AVAILABLE"!=_.user_ivr_state||(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty",_.user_ivr_state+" so let kill the agent app side."),_.client.removeListener("PlaybackFinished",e),d(_.channel,_.agentChannel),setTimeout(d,1100,_.channel,_.agentChannel))});function g(){logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Inside start_playback"),"PLAY_NOT_AVAILABLE"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (PLAY_NOT_AVAILABLE)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.not_available+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):"PLAY_BUSSY"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (PLAY_BUSSY)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.number_is_bussy+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):"PLAY_BUSSY_SWITCHEDOFF"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (PLAY_BUSSY_SWITCHEDOFF)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.busy_or_switchedoff+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):"PLAY_SWITCHEDOFF_NOTRESPONDING"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (PLAY_SWITCHEDOFF_NOTRESPONDING)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.notresponding_or_switchedoff+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):"WAITING_AGENT_C2C_DATA"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (WAITING_AGENT_C2C_DATA)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.agent_wait_fetching_data+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):"AGENT_C2C_TRY_LATER"==_.user_ivr_state?(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","IVR STATE (AGENT_C2C_TRY_LATER)"),_.mediafileName=cfg.media.dir+"/"+cfg.outgoing.agent_try_after_sometime+"-e",logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Play ("+_.mediafileName+")"),current_sound="sound:"+_.mediafileName,logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Going to play media["+current_sound+"]"),e=null,e=_.client.Playback(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","channel:",_.channel.caller),_.channel.play({media:current_sound},e,function(e,n){logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","...In Playback Handler:"+e)})):logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","Invalid DB response!")}function i(){logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","cleanup request.."),_.channel.removeListener("ChannelHangupRequest",a),"1"==_.idealAgentFlag&&logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","calling makeAgentFree to mark the tried agent idle"),null!=_.agentChannel&&(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","removeListener of ChannelDtmfReceived"),_.agentChannel.removeListener("ChannelDtmfReceived",o))}function o(e,n){logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Inside on_dtmf"),"#"===e.digit&&(console.log("Accepted recording",_.callRecordedFile),_.client.recordings.stop({recordingName:_.callRecordedFile},function(e){}))}function a(e,n){"INCOMING"==_.callDirection&&"22"!=_.callcdrMode&&(_.customer_number=_.idealAgentNumber),0!=_.CustomerConnectedStartTime?(_.CustomerConnectedEndTime=dateTime.getAgentDateTime(),_.CustomerConnectedDuration=dateTime.calculateDuration(_.CustomerConnectedStartTime,_.CustomerConnectedEndTime),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","CustomerConnectedDuration("+_.CustomerConnectedDuration+")")):_.CustomerConnectedStartTime="0",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","on_hangup, idealAgentNumber("+_.idealAgentNumber+") , customer_number("+_.customer_number+")"),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Inside on_hangup"),i(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","State-Machine Update to ==> [Event.HANGUP]"),_.state_machine.change_state(Event.HANGUP)}function d(e,n){e.hangup(function(e){})}function l(e,n){logger.log("IMP",_.channel.id,"agent_c2c_3rdparty",""),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","ON Event [channelStateChange {"+n.state+"}]"),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty",""),console.log(util.format("Channel %s is now: %s",n.name,n.state)),"Ringing"==n.state?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","inside Ringing state"),_.CustomerRingingStartTime=dateTime.getAgentDateTime(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","CustomerRingingStartTime("+_.CustomerRingingStartTime+")")):"Up"==n.state?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","inside Up state"),_.CustomerConnectedStartTime=dateTime.getAgentDateTime(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","CustomerConnectedStartTime("+_.CustomerConnectedStartTime+")"),_.CustomerRingingEndTime=dateTime.getAgentDateTime(),_.CustomerRingingDuration=dateTime.calculateDuration(_.CustomerRingingStartTime,_.CustomerRingingEndTime),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","CustomerRingingDuration("+_.CustomerRingingDuration+")"),_.customerStatus="0"):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","inside other state")}logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","checking App c2c detail to make customer call.."),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","SmeId: "+_.smeID),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","VirtualNo: "+_.calllongcode),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","agentnumber: "+_.idealAgentNumber),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","recording flag: "+_.smerecording),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","masking flag: "+_.smemasking),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","voicemail flag: "+_.smemasking),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","sme status flag: "+_.smestatus),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","valid SME Algorithm: "+_.smeAlgorithm),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Queue Limit: "+_.queue_limit),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","agentid: "+_.idealAgentID),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","agentgroup: "+_.idealAgentGroup),api.funGetAppOutCallDetail(_.channel.id,_.smeID,_.calling_number,_.called_number,_.callSessionId,function(e,n,a){var c,t;e||200!=n.statusCode||0==a.status?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Agent not have valid data of far end  statusCode("+n.statusCode+") && result.status("+a.status+")"),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","agentC2CtriedCounter("+_.agentC2CtriedCounter+")"),cfg.outgoing.agent_c2c_wait_retry<_.agentC2CtriedCounter?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","play, try again and kill the call."),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: AGENT_C2C_TRY_LATER"),_.user_ivr_state="AGENT_C2C_TRY_LATER"):(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","lets try again to get c2c agent data"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: WAITING_AGENT_C2C_DATA"),_.user_ivr_state="WAITING_AGENT_C2C_DATA"),_.agentC2CtriedCounter++,g(_.currentState)):0!=a.data.click2call.length?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Valid Application API response of click2call"),_.customer_number=a.data.click2call[0].to_no,_.called_number=a.data.click2call[0].from_no,_.c2cMode=a.data.click2call[0].call_mode,_.address_book_name="",_.address_book_id="0",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Customer Name: "+_.address_book_name),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Addressbook ID: "+_.address_book_id),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Customer Number: "+_.customer_number),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","C2C Mode: "+_.c2cMode),_.customer_number.length>=cfg.outgoing.number_length?(_.ringTime=0,_.ccEndNode="CCG_"+_.allocated_agent+"_"+_.ringTime+"_"+_.dialStatus,_.callMode="CRM_APP",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Called Number: "+_.customer_number),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"dialstatus",value:_.dialstatus},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: error in setchannelvar: "+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Channel Variable dialstatus set!!")}),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"ccEndNode",value:_.ccEndNode},function(e){e?logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: error in setchannelvar: "+e):logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Channel Variable ccEndNode set!!")}),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Agent "+_.idealAgentNumber+" is safe to patch a call"),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","###################### Dial Status is : "+_.dialStatus),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","###################### cc EndNode is : "+_.ccEndNode),_.allocated_agent=_.customer_number,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Will Dial the allocated Agent:"+_.allocated_agent),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","and bridge the customer number:"+_.channel.caller.number),_.channel.caller.number,_.allocated_agent,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","and bridge the customer number:"+_.channel.caller.number),c=_.channel,e="",t=_.client.Channel(),_.callModeNew="2",_.callpatchedAgentId=_.idealAgentID,_.AgentStartCallTime=dateTime.getAgentDateTime(),e=_.calllongcode,_.agentChannel=t,n="SIP/"+_.allocated_agent+"@"+cfg.asterisk.gw_ipaddr_port,e="ed_kommuno <"+e+">",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Current State ["+_.currentState+"] Update to ==> [originating]"),_.currentState="originating",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","callerID("+e+"), endPoint("+n+")"),_.originateTime=(new Date).getTime(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Call Originate Time :  "+_.originateTime),_.waitingTime=(_.originateTime-_.startTime)/1e3,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," Waiting  time : [",_.waitingTime,"]"),t.on("ChannelStateChange",l),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"waitingTime",value:_.waitingTime},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar "+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible SetChannelVar set!")}),c.on("StasisEnd",function(e,n){var a;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," channel inside StasisEnd  "+n.id),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," Inside channel StasisEnd function "),a=t,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Channel "+n.name+" left our application, hanging up dialed channel: "+a.name),a.hangup(function(e){})}),t.on("ChannelDestroyed",function(e,n){var a,t,l,r,c;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Inside dialed ChannelDestroyed, Current State ["+_.currentState+"]"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Agent call disconneced, Reason_Cause["+e.cause+"] Cause_Msg["+e.cause_txt+"]"),_.agentCallResponseCode=e.cause,_.agentCallResponseMsg=e.cause_txt,_.customerEndCallTime=dateTime.getAgentDateTime(),0!=_.CustomerConnectedStartTime?(_.CustomerConnectedEndTime=dateTime.getAgentDateTime(),_.CustomerConnectedDuration=dateTime.calculateDuration(_.CustomerConnectedStartTime,_.CustomerConnectedEndTime),logger.log("DEB",_.channel.id,"call_autodial","CustomerConnectedDuration("+_.CustomerConnectedDuration+")")):_.CustomerConnectedStartTime="0","patched"!=_.currentState?(e=dateTime.getAgentDateTime(),e=dateTime.calculateDuration(_.AgentStartCallTime,e),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","failed call duration("+e+" seconds)"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Play End Call Termination to A-Party"),"16"==_.agentCallResponseCode&&e<"30"||"17"==_.agentCallResponseCode?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: PLAY_BUSSY"),_.user_ivr_state="PLAY_BUSSY"):"16"==_.agentCallResponseCode&&"30"<=e?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: PLAY_SWITCHEDOFF_NOTRESPONDING"),_.user_ivr_state="PLAY_SWITCHEDOFF_NOTRESPONDING"):"19"==_.agentCallResponseCode?(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: PLAY_BUSSY_SWITCHEDOFF"),_.user_ivr_state="PLAY_BUSSY_SWITCHEDOFF"):(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","no match case so playing default end call media"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Media State Update: PLAY_NOT_AVAILABLE"),_.user_ivr_state="PLAY_NOT_AVAILABLE"),g(_.currentState)):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","State ("+_.currentState+") so no Media for End Call Termination"),"1"==_.callRecordingStatus?"mp3"==cfg.system.recording_type?(logger.log("DEB",_.channel.id,"agent_outgoing","active recording, need to stop!"),console.log("Accepted recording",_.callRecordedFile),_.client.recordings.stop({recordingName:_.callRecordedFile},function(e){}),t=_.callRecordedFile+".wav",l="/var/spool/asterisk/recording/"+_.callRecordedFile+".wav",r=cfg.media.rec_dir+"/"+_.callRecordedFile+".wav",a=cfg.media.rec_dir+"/"+_.callRecordedFile+".mp3",c=cfg.media.rec_dir+"/"+_.smeID,fs.existsSync(c)||fs.mkdirSync(c),_.callRecordedFile=l,mv(l,r,function(e){if(e)throw e;logger.log("DEB",_.channel.id,"agent_outgoing","RECORDING Successfully Move from: ("+l+") to: ("+r+")"),_.callRecordedFile=r,_.s3RecordedFile=a,_.s3RecordedFileWav=r,logger.log("DEB",_.channel.id,"agent_outgoing","storing recording in DB.."),_.callDirection="OUTGOING";e=`ffmpeg -i ${_.s3RecordedFileWav} -codec:a libmp3lame -qscale:a 2 `+_.s3RecordedFile;exec(e,(e,n,a)=>{e?(logger.log("ERR",_.channel.id,"agent_outgoing","ENCODING failed, store failed recording. SaveS3FailedRecordingData error"+e),logger.log("ERR",_.channel.id,"agent_outgoing","file encoded failed to mp3 "+_.s3RecordedFile+" from wav "+_.s3RecordedFileWav),agentProcessor.SaveS3FailedRecordingData(_)):(logger.log("DEB",_.channel.id,"agent_outgoing","file encoded to mp3 "+_.s3RecordedFile+" from wav "+_.s3RecordedFileWav),null!=_.s3RecordedFile&&0!=_.s3RecordedFile.length&&awsS3.s3Upload(_,_.smeID,_.s3RecordedFile,_.s3RecordedFile,function(e,n){e?(logger.log("ERR",_.channel.id,"agent_outgoing","UPLOAD s3Upload failed, store for retry"),logger.log("DEB",_.channel.id,"agent_outgoing","UPLOAD to s3 failed, store failed recording. SaveS3FailedRecordingData"),agentProcessor.SaveS3FailedRecordingData(_)):(logger.log("DEB",_.channel.id,"agent_outgoing","UPLOAD S3 s3Upload Received: "+n.Location),console.log(n),_.s3uploadedUrl=n.Location,_.callDirection="OUTGOING",logger.log("DEB",_.channel.id,"agent_outgoing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(_),fs.unlink(_.s3RecordedFileWav,e=>{e?(logger.log("ERR",_.channel.id,"agent_outgoing","DELETE error while deleting wav recording file("+_.s3RecordedFileWav+"):",e),console.error(e)):logger.log("DEB",_.channel.id,"agent_outgoing","DELETE successfully deleting wav recording file"+_.s3RecordedFileWav)}),fs.unlink(_.s3RecordedFile,e=>{e?(logger.log("ERR",_.channel.id,"agent_outgoing","DELETE error while deleting mp3 recording file("+_.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",_.channel.id,"agent_outgoing","DELETE successfully deleting mp3 recording file"+_.s3RecordedFile)}))}))})})):"wav"==cfg.system.recording_type?(logger.log("DEB",_.channel.id,"agent_outgoing","active recording, need to stop!"),console.log("Accepted recording",_.callRecordedFile),_.client.recordings.stop({recordingName:_.callRecordedFile},function(e){}),t=_.callRecordedFile+".wav",l="/var/spool/asterisk/recording/"+_.callRecordedFile+".wav",r=cfg.media.rec_dir+"/"+_.callRecordedFile+".wav",c=cfg.media.rec_dir+"/"+_.smeID,fs.existsSync(c)||fs.mkdirSync(c),_.callRecordedFile=l,mv(l,r,function(e){if(e)throw e;logger.log("DEB",_.channel.id,"agent_outgoing","RECORDING Successfully Move from: ("+l+") to: ("+r+")"),_.callRecordedFile=r,_.s3RecordedFile=r,logger.log("DEB",_.channel.id,"agent_outgoing","storing recording in DB.."),_.callDirection="OUTGOING",null!=_.s3RecordedFile&&0!=_.s3RecordedFile.length&&awsS3.s3Upload(_,_.smeID,_.s3RecordedFile,t,function(e,n){e?logger.log("ERR",_.channel.id,"agent_outgoing","s3Upload failed"):(logger.log("DEB",_.channel.id,"agent_outgoing","s3Upload Received: "+n.Location),console.log(n),_.s3uploadedUrl=n.Location,logger.log("DEB",_.channel.id,"agent_outgoing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(_),fs.unlink(_.s3RecordedFile,e=>{e?(logger.log("ERR",_.channel.id,"agent_outgoing","DELETE error while deleting wav recording file("+_.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",_.channel.id,"agent_outgoing","DELETE successfully deleting wav recording file"+_.s3RecordedFile)}))})})):logger.log("ERR",_.channel.id,"agent_outgoing","invalid recording format mentioned in cfg file. ("+cfg.system.recording_type+")"):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","No active recording!"),_.callInfo="outgoing",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","generating agent cdr for agent call reporting (failed to answer)"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","============================================== free the agent =================================="),agentProcessor.logAgentCdr(_),agentProcessor.logCustomerCdr(_),"originating"==_.currentState?(_.disconnectStatus="NOANSWER",i()):"feedback"==_.currentState?logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," call current state is : ["+_.currentState+"]"):("user_disconnect"!=_.currentState&&(logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Current State ["+_.currentState+"] Update to ==> [agent_disconnect]"),_.currentState="agent_disconnect",_.disconnectStatus="AGENT",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," Call disconnected by agent")),d(_.channel))}),a="channel:"+_.channel.id,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","stasisApp app name: "+cfg.asterisk.stasisApp),_.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:a},function(e,n){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","Error while subscribing for channel!!"):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Subscribed for channel successfully")}),t.on("Ring",function(e,n){logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Ringing!!!")}),_.client.channels.ring({channelId:_.channel.id},function(e){e&&logger.log("['ERR', call.channel.id, 'agent_c2c_3rdparty', "+this.state_name+"]: Error in Ringing Function "+e)}),t.on("ChannelHold",function(e,n){_.holdEventTime=(new Date).getTime(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","#####   ChannelHold and time is : !!!"+_.holdEventTime)}),t.on("ChannelUnhold",function(e,n){logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," #####   ChannelUnhold !!!"),_.currentTime=(new Date).getTime();var a=_.currentTime-_.holdEventTime;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","current time is : "+_.currentTime),_.totalHoldDuration=_.totalHoldDuration+a,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","current hold Duration is : "+a),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","holdDuration "+_.totalHoldDuration/1e3),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"holdTime",value:_.totalHoldDuration/1e3},function(e){e&&logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar "+e)})}),t.on("StasisStart",function(e,n){var t,l,r;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Stasis Started for dialed:  "+n.id),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Stasis Started time : "+_.startTime),agentProcessor.updateLiveCall(_,"22"),t=c,l=n,r=_.client.Bridge(),l.on("StasisEnd",function(e,n){var a;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Inside dialed StasisEnd function"),"none"==_.calldisconnectedBy&&(_.calldisconnectedBy="agent_disconnect"),a=n,n=r,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Dialed channel "+a.name+" has left our application, destroying bridge "+a.name),n.destroy(function(e){if(e)throw e;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Bridge Destroyed !"+a.name)})}),l.on("ChannelDtmfReceived",o),l.answer(function(e){if(e)throw e;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Dialed Channel Answered. Inform CRM about patching here"),_.dialStatus="ANSWER",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Dial Status change to  : ["+_.dialStatus+"]"),_.answerTime=(new Date).getTime();var n,a,e=parseInt(_.answerTime/1e3);logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","answer time is "+e),_.ringTime=(_.answerTime-_.originateTime)/1e3,_.ccEndNode="CCG_"+_.allocated_agent+"_"+_.ringTime+"_"+_.dialStatus,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty"," Ring Time : ["+_.ringTime+"] and CCG endNode is : ["+_.ccEndNode+"]"),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"ringTime",value:_.ringTime},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar: "+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible ringTime set! ")}),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"callPatchTime",value:e},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar: "+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible callPatchTime set! ")}),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"dialStatus",value:_.dialStatus},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar(%s)"+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible dialStatus set! ")}),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"ccEndNode",value:_.ccEndNode},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar: "+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible ccEndNode set! ")}),_.client.channels.setChannelVar({channelId:_.channel.id,variable:"waitingStatus",value:"ANSWERED"},function(e){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Error in SetChannelVar(%s)"+e):logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","["+this.state_name+"]: Channel Varaible waitingStatus set! ")}),e=t,n=l,a=r,logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Adding channel "+e.name+" and dialed channel "+n.name+" to bridge: "+a.id),a.addChannel({channel:[e.id,n.id]},function(e){if(e)throw e;_.BRIDGED_TIME=(new Date).getTime();e=parseInt(_.BRIDGED_TIME/1e3);logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Time When bridged:"+e)}),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Will send notify for channel "+t.id+" and caller: "+t.caller.number),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Current State ["+_.currentState+"] Update to ==> [patched]"),_.currentState="patched"}),r.create({type:"mixing,dtmf_events,proxy_media"},function(e,n){if(e)throw e;logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Created bridge: "+n.id),_.AgentStatus=0,_.callanswerFlag="2","1"==_.callfinalStatus&&(_.callfinalStatus="0"),"none"==_.callpatchedAgentGroup&&(_.callpatchedAgentGroup=_.idealAgentGroup),_.callpatchedAgentId=_.idealAgentID,"false"==_.callcdrFlag&&(_.callcdrFlag="true;"),"1"==_.smerecording&&(logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","enabled SME recording flag: "+_.smerecording),_.callRecordedFileRaw="AOR_"+_.channel.id+"_"+Date.now().toString(),_.callRecordedFile=_.smeID+"/"+_.callRecordedFileRaw,_.client.bridges.record({bridgeId:n.id,format:"wav",name:_.callRecordedFile},e=>{}),logger.log("IMP",_.channel.id,"agent_c2c_3rdparty","Recording started @: "+_.callRecordedFile),_.callRecordingStatus="1")})}),t.originate({endpoint:n,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:e},function(e,n){e?logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","Error in dialing("+e+")"):(_.customerStartCallTime=dateTime.getAgentDateTime(),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","customerStartCallTime("+_.customerStartCallTime+") marked on dialing"))})):(logger.log("ERR",_.channel,"agent_c2c_3rdparty","Invalid number to make click2call ("+_.customer_number+")"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Agent not have valid data of far end call.customer_number.length:("+_.customer_number.length+")"),_.callagentincomingstate="AGENT_WELCOME",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Its Agent Incoming call (IVR-Call)"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","State-Machine Update to ==> [Event.AGENT_INCOMING]"),_.state_machine.change_state(Event.AGENT_INCOMING)),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Init Call CDR and Unique Number Detail Set on NEW CALL."),agentProcessor.setEndCallCdr(_,"0"),agentProcessor.addLiveCall(_)):(logger.log("ERR",_.channel.id,"agent_c2c_3rdparty","invalid customer number length: "+_.customer_number.length),_.callagentincomingstate="AGENT_WELCOME",logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","Its Agent Incoming call (IVR-Call)"),logger.log("DEB",_.channel.id,"agent_c2c_3rdparty","State-Machine Update to ==> [Event.AGENT_INCOMING]"),_.state_machine.change_state(Event.AGENT_INCOMING))})}}module.exports=AgentClick2Call;