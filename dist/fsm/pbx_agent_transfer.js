var Event=require("../events"),cfg=require("../../../pbx_config"),pbx_db=require("../pbx_db"),pbx_api=require("../api/pbx_api.js"),pbx_zmq=require("../pbx_zmq"),pbx_logger=require("../logger/pbx_logger.js"),awsS3=require("../s3/awsS3.js"),agent_processor=require("../agent_processor"),express=require("express"),dt=require("../common/datetime.js"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv"),logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,awsS3=new awsS3,dbOutput="",dbSMEid="",api=new pbx_api,zmq=new pbx_zmq;function AgentOutgoingCall(E){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [AgentOutgoingCall]"),this.state_name="agent_transfer_state",logger.log("DEB",E.channel.id,"agent_transfer","Current State ["+E.currentState+"] Update to ==> [dialing]"),E.currentState="dialing",E.dialStatus="NOANSWER";E.totalHoldDuration=0,this.enter=function(){var i;new pbx_db;function o(e,n){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [start_playback]"),"YOUR_CALL_IMPT_TO_US"==E.user_ivr_state&&(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (YOUR_CALL_IMPT_TO_US)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})),"YOUR_CALL_IMPT_TO_US_15SEC"==E.user_ivr_state&&(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (YOUR_CALL_IMPT_TO_US_15SEC)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call_15sec+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})),"req_ATTENDANT_CALL_TRANSFER"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (req_ATTENDANT_CALL_TRANSFER)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_transfer+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,logger.log("DEB",E.channel.id,"ivr_detail","callBridgeId["+E.callBridgeId+"]"),i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),E.client.bridges.play({media:current_sound,bridgeId:E.callBridgeId},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"TRANSFER_AGENT_BUSY"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (TRANSFER_AGENT_BUSY)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.agent_ext_busy+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"TRANSFER_AGENT_INVALID"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (TRANSFER_AGENT_INVALID)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.invalid_agent_ext+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"TRANSFER_AGENT_NOTREACHABLE"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (TRANSFER_AGENT_NOTREACHABLE)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.notrechable_agent_ext+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"TRANSFER_AGENT_ONBREAK"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (TRANSFER_AGENT_ONBREAK)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.agent_ext_onbreak+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"caller_YOUR_HOLD_MUSIC"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","IVR STATE (caller_YOUR_HOLD_MUSIC)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_hold_music_35sec+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.transHoldMusic="1",E.gmediaFile=current_sound,i=E.client.Playback(),E.orignalAgentPlayback=i,logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)})):"1"==E.transHoldMusic&&(current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_hold_music_35sec+"-"+E.language,logger.log("DEB",E.channel.id,"ivr_detail","Going to play media["+current_sound+"]"),i=null,E.transHoldMusic="1",E.gmediaFile=current_sound,i=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_transfer","channel:",E.channel.caller),n.play({media:current_sound},i,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)}))}function s(e){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [on_playback_finished]"),logger.log("DEB",E.channel.id,"agent_transfer","on_playback_finished ivr state "+E.user_ivr_state),"TRANSFER_AGENT_ONBREAK"!=E.user_ivr_state&&"TRANSFER_AGENT_NOTREACHABLE"!=E.user_ivr_state&&"TRANSFER_AGENT_INVALID"!=E.user_ivr_state&&"TRANSFER_AGENT_BUSY"!=E.user_ivr_state||0==E.dialedLegDinit&&d(),"req_UNATTENDANT_CALL_TRANSFER"==E.user_ivr_state?("1"==E.flagTransferDtmfStarOne&&(logger.log("DEB",E.channel.id,"agent_transfer","[timerTransferDtmf] timer initialize.."),E.objTransferDtmfStarOne=setTimeout(a,1e3*cfg.timer.transfer_dtmf_timer),E.timerState="transfer_dtmf_input"),i&&i.id==e.playback.id&&E.channel&&(logger.log("DEB",E.channel.id,"agent_transfer","Play Promot ("+E.gmediaFile+") finished"),"1"==E.transHoldMusic&&(o(E.currentState,E.channel),logger.log("DEB",E.channel.id,"agent_transfer","Play Hold Music to Customer till we stopped...")),"YOUR_CALL_IMPT_TO_US"!=E.user_ivr_state)&&E.user_ivr_state):"TRANSFER_AGENT_INVALID"==E.user_ivr_state&&("1"==E.transHoldFlag&&(logger.log("DEB",E.channel.id,"agent_transfer","UnHold (default)"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Channel UNHOLD stopMoh now..."),E.transHoldFlag="0")})),E.user_ivr_state="req_UNATTENDANT_CALL_TRANSFER",E.agent_extention="")}function d(){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [jump_back_to_dailed_session]"),E.transferLeg.removeListener("ChannelHangupRequest",_),E.transferLeg.removeListener("PlaybackFinished",s),E.transferLeg.removeListener("ChannelStateChange",u),E.transferLeg.removeListener("ChannelDtmfReceived",c),E.dialedLeg.removeListener("ChannelDtmfReceived",c),logger.log("DEB",E.channel.id,"agent_transfer","Update state from ["+E.user_ivr_state+"] to [FAILED_TRANSFER_CASE]"),E.user_ivr_state="FAILED_TRANSFER_CASE",logger.log("DEB",E.channel.id,"agent_transfer","State-Machine Update to ==> [Event.AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL)}function c(e,l){var n;switch(logger.log("IMP",E.channel.id,"agent_transfer","ON Event [on_dtmf]"),logger.log("DEB",E.channel.id,"agent_transfer","DTMF event("+e.digit+") "),"req_ATTENDANT_CALL_TRANSFER"==E.user_ivr_state||"req_UNATTENDANT_CALL_TRANSFER"==E.user_ivr_state?(E.agent_extention=E.agent_extention+e.digit,"4"<=E.agent_extention.length?(logger.log("DEB",E.channel.id,"agent_transfer","lets clear the timer objTransferDtmfStarOne"),clearTimeout(E.objTransferDtmfStarOne),logger.log("DEB",E.channel.id,"agent_transfer","Complete Agent Extention Received ("+E.agent_extention+") & length ("+E.agent_extention.length+")"),logger.log("DEB",E.channel.id,"agent_transfer","Update state from ["+E.user_ivr_state+"] to [TRANSFER_CALL_TO_EXTENTION]"),E.callagentincomingstate="TRANSFER_CALL_TO_EXTENTION",logger.log("DEB",E.channel.id,"user_detail","going to call function checkValidAgentExt"),api.checkValidAgentExt(E.channel.id,E.smeID,E.agent_extention,E.callSessionId,function(e,n,a){var r,t,g;logger.log("DEB",E.channel.id,"agent_transfer","API Status:"+a.status),logger.log("DEB",E.channel.id,"agent_transfer","API Message:"+a.message),logger.log("DEB",E.channel.id,"agent_transfer","API in_agent_id:"+a.data[0].in_agent_id),e?logger.log("ERR",E.channel.id,"agent_transfer","error in validating agent extention("+E.agent_extention+") "+e):("0"==a.status?(E.callType="1",logger.log("DEB",E.channel.id,"agent_transfer","Agent Ext is invalid"),E.user_ivr_state="TRANSFER_AGENT_INVALID",o(E.currentState,l),logger.log("DEB",E.channel.id,"agent_transfer","restting agent_extention to black for start again."),E.agent_extention=""):(E.transAgentMobile=a.data[0].in_agent_mobile,E.transAgentId=a.data[0].in_agent_id,E.transAgentGroup=a.data[0].in_group_id,E.transAgenStatus=a.data[0].in_agent_status,E.transAgenSticky=a.data[0].in_agent_sticky,E.transAgenMasking=a.data[0].in_agent_masking,E.transAgenScore=a.data[0].in_agent_score,E.transAgenStickyDays=a.data[0].in_agent_sticky_days,E.transAgenEmailId=a.data[0].in_email_id,logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Mobile No("+E.transAgentMobile+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent ID("+E.transAgentId+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Group("+E.transAgentGroup+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Status("+E.transAgenStatus+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Sticky("+E.transAgenSticky+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Masking("+E.transAgenMasking+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Score("+E.transAgenScore+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Sticky Days("+E.transAgenStickyDays+")"),logger.log("DEB",E.channel.id,"agent_transfer","call transfer Agent Email("+E.transAgenEmailId+")"),"1"==E.transAgenStatus?(logger.log("DEB",E.channel.id,"agent_transfer","Lets transfer call to agent.."),logger.log("DEB",E.channel.id,"agent_transfer","removing custome from bridge for now...."),e=E.channel,a=E.callBridge,logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [removeChannelsFromBridge]"),logger.log("DEB",E.channel.id,"agent_transfer","[[[[[[[[[[[[[[[[[[[[[ Removing channel "+e.id+" from bridge: "+a.id+"]]]]]]]]]]]]]]]]]]]]]"),E.client.bridges.removeChannel({bridgeId:a.id,channel:e.id},function(e){if(e)throw e;logger.log("DEB",E.channel.id,"agent_transfer","removeChannel")}),E.user_ivr_state="caller_YOUR_HOLD_MUSIC","0"==E.transLegFlag?(E.orignalAgentHoldMusic="1",o(E.currentState,E.dialedLeg)):(E.orignalAgentHoldMusic="1",o(E.currentState,E.transferLeg)),"UNATTENDANT_CALL_TRANSFER"==E.transType&&h(l,E.channel,E.callBridge),r=E.channel,a="",t=E.client.Channel(),logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [transfer]"),logger.log("DEB",E.channel.id,"agent_transfer","for testing only-------transferee:("+t+"), transferee.id:"+t.id),logger.log("DEB",E.channel.id,"agent_transfer","[[[[[[[[[[[[[[[[[[[[[[[[[[[ Transferee Channel created:"+t.id+"]]]]]]]]]]]]]]]]]]]]]]]]]]]"),logger.log("DEB",E.channel.id,"agent_transfer","Agent "+E.transAgentMobile+" is safe to patch a call"),logger.log("DEB",E.channel.id,"agent_transfer","###################### Dial Status is : "+E.dialStatus),logger.log("DEB",E.channel.id,"agent_transfer","###################### cc EndNode is : "+E.ccEndNode),E.allocated_agent=E.transAgentMobile,logger.log("DEB",E.channel.id,"agent_transfer","Will Dial the allocated Agent:"+E.transAgentMobile),logger.log("DEB",E.channel.id,"agent_transfer","and bridge the customer number:"+E.channel.caller.number),E.channel.caller.number,E.transAgentMobile,logger.log("DEB",E.channel.id,"agent_transfer","and bridge the customer number:"+E.channel.caller.number),"1"==E.smemasking?(E.channel.caller.number,Math.floor(9e5*Math.random()+1e5),a=E.outVirtualNo,logger.log("DEB",E.channel.id,"agent_transfer","Masking [ON] setting CLI as ["+a+"]")):(a=E.outVirtualNo,logger.log("DEB",E.channel.id,"agent_transfer","Masking [OFF] setting CLI as ["+a+"]")),E.transferLeg=t,logger.log("IMP",E.channel.id,"agent_transfer","transferLegState Changed ["+E.transferLegState+" => ready]"),E.transferLegState="ready",E.TransferAgentStartTime=dateTime.getAgentDateTime(),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentStartTime ["+E.TransferAgentStartTime+"]"),E.transfreeAgentSessionID=t.id,e="SIP/"+E.transAgentMobile+"@"+cfg.asterisk.gw_ipaddr_port,a="ed_wringg <"+a+">",logger.log("DEB",E.channel.id,"agent_transfer","Current State ["+E.currentState+"] Update to ==> [originating]"),logger.log("DEB",E.channel.id,"agent_transfer","callerID("+a+"), endPoint("+e+")"),E.currentState="originating",E.originateTime=(new Date).getTime(),logger.log("DEB",E.channel.id,"agent_transfer","Call Originate Time :  "+E.originateTime),E.waitingTime=(E.originateTime-E.startTime)/1e3,logger.log("DEB",E.channel.id,"agent_transfer"," Waiting  time : [",E.waitingTime,"]"),t.on("StasisEnd",function(e,n){var a;logger.log("IMP",E.channel.id,"agent_transfer","ON Event [StasisEnd - transferee.on]"),E.transferLegDinit=!0,logger.log("DEB",E.channel.id,"agent_transfer","set transferLegDinit true"),"none"==E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("DEB",E.channel.id,"agent_transfer"," channel inside StasisEnd  "+n.id),logger.log("DEB",E.channel.id,"agent_transfer"," Inside channel StasisEnd function "),"1"==E.orignalAgentHoldMusic&&"0"==E.transLegFlag?(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent dialer(StasisEnd)"),E.channel&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic)):"1"==E.orignalAgentHoldMusic&&"1"==E.transLegFlag?(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent transfree(StasisEnd)"),E.channel&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic)):logger.log("DEB",E.channel.id,"agent_transfer","nothing to stop(StasisEnd)"),n=n,a=t,logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [hangupDialed]"),logger.log("DEB",E.channel.id,"agent_transfer","Channel "+n.name+" left our application, hanging up session channel: "+a.name),a.hangup(function(e){}),0==E.dialedLegDinit&&d()}),t.on("ChannelDestroyed",function(e,n){var a,r,t;logger.log("IMP",E.channel.id,"agent_transfer","ON Event [ChannelDestroyed - transferee.on]"),"none"===E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("DEB",E.channel.id,"agent_transfer","Inside transferee ChannelDestroyed, Current State ["+E.currentState+"]"),E.transferLegDinit=!0,logger.log("DEB",E.channel.id,"agent_transfer","set transferLegDinit true"),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentRingingDuration is("+E.TransferAgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentConnectedStartTime is("+E.TransferAgentConnectedStartTime+")"),(E.TransferAgentRingingDuration<="0"||isNaN(E.TransferAgentRingingDuration))&&(E.TransferAgentRingingEndTime=dateTime.getAgentDateTime(),E.TransferAgentRingingDuration=dateTime.calculateDuration(E.TransferAgentRingingStartTime,E.TransferAgentRingingEndTime)),0!=E.TransferAgentConnectedStartTime?(E.TransferAgentConnectedEndTime=dateTime.getAgentDateTime(),E.TransferAgentConnectedDuration=dateTime.calculateDuration(E.TransferAgentConnectedStartTime,E.TransferAgentConnectedEndTime)):E.TransferAgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_transfer","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentRingingDuration("+E.TransferAgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentConnectedDuration("+E.TransferAgentConnectedDuration+")"),logger.log("DEB",E.channel.id,"agent_transfer","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_transfer","Agent call disconneced, Reason_Cause["+e.cause+"] Cause_Msg["+e.cause_txt+"]"),E.agentCallResponseCode=e.cause,E.agentCallResponseMsg=e.cause_txt,E.callInfo="transfer",E.transLegFlag="0",E.transferCallFlag="1",E.origAgentSessionID=E.transferLeg.id,E.transfreeAgentSessionID="",logger.log("DEB",E.channel.id,"agent_transfer","transferLegState("+E.transferLegState+") && transAgentWriteCdrFlag("+E.transAgentWriteCdrFlag+")"),"init"!=E.transferLegState&&1!=E.transAgentWriteCdrFlag?(E.callRouteReason="transfer",logger.log("DEB",E.channel.id,"agent_transfer","callRouteReason:"+E.callRouteReason),logger.log("DEB",E.channel.id,"agent_transfer","logAgentCdrTransfer generating agent cdr for transfer agent"),agentProcessor.logAgentCdrTransfer(E),logger.log("DEB",E.channel.id,"agent_transfer","freeTransferAgent marking transfer agent free"),agentProcessor.freeTransferAgent(E),E.transAgentWriteCdrFlag=!0):logger.log("DEB",E.channel.id,"agent_transfer","already, made transfer agent free and write transfer agent cdr"),"1"==E.transHoldFlag?("1"==E.orignalAgentHoldMusic&&(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent dialer(StasisEnd)"),E.channel)&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic),E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_transfer","lets clear the timer objReminderCallHoldToAgent"),clearTimeout(E.objReminderCallHoldToAgent),logger.log("DEB",E.channel.id,"agent_transfer","UnHold (default)"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Channel UNHOLD now..."),E.transHoldFlag="0")})):logger.log("DEB",E.channel.id,"agent_transfer","call not on hold..."),logger.log("DEB",E.channel.id,"agent_transfer","transferLegState("+E.transferLegState+") && transAgentWriteCdrFlag("+E.transAgentWriteCdrFlag+")"),"init"!=E.transferLegState&&1!=E.transAgentWriteCdrFlag?(E.callRouteReason="transfer",logger.log("DEB",E.channel.id,"agent_transfer","callRouteReason:"+E.callRouteReason),logger.log("DEB",E.channel.id,"agent_transfer","logAgentCdrTransfer generating agent cdr for transfer agent"),agentProcessor.logAgentCdrTransfer(E),logger.log("DEB",E.channel.id,"agent_transfer","freeTransferAgent marking transfer agent free"),agentProcessor.freeTransferAgent(E),E.transAgentWriteCdrFlag=!0):logger.log("DEB",E.channel.id,"agent_transfer","already, made transfer agent free and write transfer agent cdr"),"1"==E.callRecordingStatus?"wav"==cfg.system.recording_type?(t=E.callRecordedFile+".wav",a="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",logger.log("DEB",E.channel.id,"agent_transfer","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),logger.log("DEB",E.channel.id,"agent_transfer","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),r=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(r)||fs.mkdirSync(r),E.callRecordedFile=a,logger.log("DEB",E.channel.id,"agent_transfer","RECORDING Successfully Done ("+a+")"),E.callRecordedFile=a,E.s3RecordedFile=a,logger.log("DEB",E.channel.id,"agent_transfer","storing recording in DB.."),E.callDirection="INCOMING",null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,t,function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","s3Upload failed"):(logger.log("DEB",E.channel.id,"agent_transfer","s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,logger.log("DEB",E.channel.id,"agent_transfer","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_transfer","DELETE error while deleting wav recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_transfer","DELETE successfully deleting wav recording file"+E.s3RecordedFile)}))})):"mp3"==cfg.system.recording_type?(logger.log("DEB",E.channel.id,"agent_transfer","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),t=E.callRecordedFile+".wav",a="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",e=cfg.media.rec_dir+"/"+E.callRecordedFile+".mp3",logger.log("DEB",E.channel.id,"agent_transfer","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),r=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(r)||fs.mkdirSync(r),E.callRecordedFile=a,logger.log("DEB",E.channel.id,"agent_transfer","RECORDING Successfully Done ("+a+")"),E.callRecordedFile=a,E.s3RecordedFile=e,E.s3RecordedFileWav=a,logger.log("DEB",E.channel.id,"agent_transfer","storing recording in DB.."),E.callDirection="INCOMING",t=`ffmpeg -i ${E.s3RecordedFileWav} -codec:a libmp3lame -qscale:a 2 `+E.s3RecordedFile,exec(t,(e,n,a)=>{e?(logger.log("ERR",E.channel.id,"agent_transfer","ENCODING failed, store failed recording. SaveS3FailedRecordingData error"+e),logger.log("ERR",E.channel.id,"agent_transfer","file encoded failed to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_transfer","file encoded to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,E.s3RecordedFile,function(e,n){e?(logger.log("ERR",E.channel.id,"agent_transfer","UPLOAD s3Upload failed, store for retry"),logger.log("DEB",E.channel.id,"agent_transfer","UPLOAD to s3 failed, store failed recording. SaveS3FailedRecordingData"),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_transfer","UPLOAD S3 s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,E.callDirection="INCOMING",logger.log("DEB",E.channel.id,"agent_transfer","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFileWav,e=>{e?(logger.log("ERR",E.channel.id,"agent_transfer","DELETE error while deleting wav recording file("+E.s3RecordedFileWav+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_transfer","DELETE successfully deleting wav recording file"+E.s3RecordedFileWav)}),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_transfer","DELETE error while deleting mp3 recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_transfer","DELETE successfully deleting mp3 recording file"+E.s3RecordedFile)}))}))})):logger.log("DEB",E.channel.id,"agent_transfer","No active recording!"):logger.log("DEB",E.channel.id,"agent_transfer","No active recording!"),logger.log("DEB",E.channel.id,"agent_transfer","-----------------------------------$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"),logger.log("DEB",E.channel.id,"agent_transfer","mainLegDinit("+E.mainLegDinit+"), dialedLegDinit("+E.dialedLegDinit+"), transferLegDinit("+E.transferLegDinit+")"),1==E.transferLegDinit&&1==E.dialedLegDinit&&(logger.log("DEB",E.channel.id,"agent_transfer","transferLeg.hangup from main...."),E.mainLeg.hangup(function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","Error while hangup main leg."+e):logger.log("DEB",E.channel.id,"agent_transfer","success while hangup main leg.")})),0==E.dialedLegDinit&&d()}),g="channel:"+E.channel.id,logger.log("DEB",E.channel.id,"agent_transfer","stasisApp app name: "+cfg.asterisk.stasisApp),E.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:g},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","Error while subscribing for channel!!"):logger.log("DEB",E.channel.id,"agent_transfer","Subscribed for channel successfully")}),t.on("Ring",function(e,n){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [Ring - transferee.on]"),logger.log("DEB",E.channel.id,"agent_transfer","Ringing!!!")}),t.on("ChannelHold",function(e,n){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [ChannelHold - transferee.on]")}),t.on("ChannelUnhold",function(e,n){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [ChannelUnhold - transferee.on]")}),t.on("StasisStart",function(e,n){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [StasisStart - transferee.on]"),logger.log("DEB",E.channel.id,"agent_transfer","Stasis Started for transferee:  "+n.id),logger.log("DEB",E.channel.id,"agent_transfer","Stasis Started time : "+E.startTime),logger.log("IMP",E.channel.id,"agent_transfer","transferLegState Changed ["+E.transferLegState+" => connected]"),E.transferLegState="connected",E.transferLegInit=!0,logger.log("DEB",E.channel.id,"agent_transfer","set transferLegInit true"),E.TransferAgentConnectedEndTime=dateTime.getAgentDateTime(),E.TransferAgentConnectedDuration=dateTime.calculateDuration(E.TransferAgentConnectedStartTime,E.TransferAgentConnectedEndTime),logger.log("DEB",E.channel.id,"agent_transfer","TransferAgentConnectedDuration("+E.TransferAgentConnectedDuration+")"),E.transferCallFlag="1",clearTimeout(E.objTransferDtmfStarOne),E.flagTransferDtmfStarOne="0",E.callTransferRestrictionCount++,logger.log("DEB",E.channel.id,"agent_transfer","on Stasis callTransferRestrictionCount : "+E.callTransferRestrictionCount),"1"==E.transHoldFlag&&(logger.log("DEB",E.channel.id,"agent_transfer","UnHold (default)"),"1"==E.orignalAgentHoldMusic&&(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent dialer(StasisEnd)"),E.channel)&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Channel UNHOLD stopMoh now..."),E.transHoldFlag="0")})),"UNATTENDANT_CALL_TRANSFER"==E.transType&&(f(E.channel,E.dialedLeg),E.transferLeg=n,E.transferLeg.on("ChannelDtmfReceived",c),E.user_ivr_state="ok_TRANSFER_COMPLETED",logger.log("DEB",E.channel.id,"agent_transfer","Channel State Updated to ["+E.user_ivr_state+"]"),logger.log("DEB",E.channel.id,"agent_transfer","stopping hold music to customer leg."),i)&&(E.channel&&(E.transHoldMusic="0",logger.log("DEB",E.channel.id,"agent_transfer","stopping playing file ("+E.gmediaFile+")")),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","2================stopMoh error: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","2================stopMoh success"),E.transHoldFlag="0")})),"1"==E.orignalAgentHoldMusic&&"0"==E.transLegFlag?(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent dialer(StasisStart)"),E.channel&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic)):"1"==E.orignalAgentHoldMusic&&"1"==E.transLegFlag?(logger.log("DEB",E.channel.id,"agent_transfer","stop ringing to orignal agent transfree(StasisStart)"),E.channel&&(E.orignalAgentPlayback.stop(),E.orignalAgentHoldMusic)):logger.log("DEB",E.channel.id,"agent_transfer","nothing to stop(StasisStart)"),h(r,n,E.callBridge),logger.log("DEB",E.channel.id,"agent_transfer","hangupAgentLeg because transfer is successfull")}),t.on("ChannelHangupRequest",_),t.on("PlaybackFinished",s),t.on("ChannelStateChange",u),logger.log("IMP",E.channel.id,"agent_transfer","transferLegState Changed ["+E.transferLegState+" => originating]"),E.transferLegState="originating",E.transferLegInit=!0,logger.log("DEB",E.channel.id,"agent_transfer","set transferLegInit true"),E.transferLegDinit=!1,t.originate({endpoint:e,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:a},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","Error in dialing("+e+")"):logger.log("IMP",E.channel.id,"agent_transfer","Init [transferee.originate]")})):("2"==E.transAgenStatus?(logger.log("DEB",E.channel.id,"agent_transfer","Agent is already on a call"),E.user_ivr_state="TRANSFER_AGENT_BUSY"):"3"==E.transAgenStatus?(logger.log("DEB",E.channel.id,"agent_transfer","Agent is on break"),E.user_ivr_state="TRANSFER_AGENT_ONBREAK"):(logger.log("ERR",E.channel.id,"agent_transfer","Invalid Agent status "+E.transAgenStatus),logger.log("DEB",E.channel.id,"agent_transfer","Agent Ext is invalid"),E.user_ivr_state="TRANSFER_AGENT_INVALID"),o(E.currentState,l))),"TRANSFER_AGENT_ONBREAK"!=E.user_ivr_state&&"TRANSFER_AGENT_NOTREACHABLE"!=E.user_ivr_state&&"TRANSFER_AGENT_INVALID"!=E.user_ivr_state&&"TRANSFER_AGENT_BUSY"!=E.user_ivr_state||0==E.dialedLegDinit&&d())})):logger.log("DEB",E.channel.id,"agent_transfer","Agent Extention Received so far ("+E.agent_extention+") & length ("+E.agent_extention.length+") but not (4)")):"CALL_TRANSFER_INIT"==E.user_ivr_state&&(E.transferCallFlag="1"),e.digit){case"*":logger.log("DEB",E.channel.id,"agent_transfer","State is "+E.user_ivr_state),"caller_YOUR_HOLD_MUSIC"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_transfer","stopping hold music to customer leg."),i&&E.channel&&(E.transHoldMusic="0",logger.log("DEB",E.channel.id,"agent_transfer","* stopping playing file ("+E.gmediaFile+")"),i.stop()),h(l,E.channel,E.callBridge),"0"!=(n=function(e){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [getTransferSession]"),logger.log("DEB",E.channel.id,"agent_transfer","transferAgentArray length ("+E.transferAgentArray.length+")");for(var n="0",a=0;a<E.transferAgentArray.length;a++){var r=E.transferAgentArray[a];logger.log("DEB",E.channel.id,"agent_transfer","Printing values ==> (CallSessionID("+r.Call_SessionID+"), AgentID("+r.Agent_ID+"), AgentGroup("+r.Agent_Group+"), AgentNumber("+r.Agent_Number+")), WhichCallLeg("+r.Which_CallLeg+")"),r.Call_SessionID==e&&(n=r.Call_Session)}return n}(E.origAgentSessionID))&&(logger.log("DEB",E.channel.id,"agent_transfer","hangup the Orignal Agent leg.."),f(E.channel,n),E.transferLeg.on("ChannelDtmfReceived",c),E.user_ivr_state="ok_TRANSFER_COMPLETED",logger.log("DEB",E.channel.id,"agent_transfer","Channel State Updated to ["+E.user_ivr_state+"]"),n=E.transferLeg.id,logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [swapTransferAgents]"),E.origAgentSessionID=n,E.transfreeAgentSessionID="")):(E.transDtmf=e.digit,E.user_ivr_state="TRANSFER_CASE_DTMF");break;case"#":"0"==E.transHoldFlag?(logger.log("DEB",E.channel.id,"agent_transfer","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(r,1e3*cfg.timer.call_hold_reminder_to_agent_timer),"connected"!=E.transferLegState&&(E.transferLeg=E.dialedLeg),E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")}),"0"!=E.dbMusicOnHoldPrompt?(logger.log("DEB",E.channel.id,"agent_transfer","Hold (custom) class "+E.smeID),E.startMohClass=E.smeID):(E.startMohClass="Default",logger.log("DEB",E.channel.id,"agent_transfer","Hold (default) class")),E.client.channels.startMoh({channelId:E.channel.id,mohClass:E.startMohClass},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while HOLD customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Customer ON HOLD now..."),E.transHoldFlag="1")})):(logger.log("DEB",E.channel.id,"agent_transfer","lets clear the timer objReminderCallHoldToAgent"),clearTimeout(E.objReminderCallHoldToAgent),"1"==E.flagTransferDtmfStarOne&&(logger.log("DEB",E.channel.id,"agent_transfer","[timerTransferDtmf] timer initialize.."),E.objTransferDtmfStarOne=setTimeout(a,1e3*cfg.timer.transfer_dtmf_timer),E.timerState="transfer_dtmf_input"),E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")}),logger.log("DEB",E.channel.id,"agent_transfer","UnHold (default)"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Channel UNHOLD stopMoh now..."),E.transHoldFlag="0")})),"CALL_TRANSFER_INIT"==E.user_ivr_state&&(logger.log("DEB",E.channel.id,"agent_transfer","stopping hold music to customer leg."),i&&E.channel&&(logger.log("DEB",E.channel.id,"agent_transfer","=========stopping playing file ("+E.gmediaFile+")"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","============stopMoh error: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","============stopMoh success"),E.transHoldFlag="0")})),logger.log("DEB",E.channel.id,"agent_transfer","Removing Orignal Agent from the call.."),logger.log("DEB",E.channel.id,"agent_transfer","adding Customer to the bridge again.."),h(l,E.channel,E.callBridge),logger.log("DEB",E.channel.id,"agent_transfer","hangup the Orignal Agent leg.."),f(E.channel,E.dialedLeg),E.user_ivr_state="rollback_TRANSFER_COMPLETED",logger.log("DEB",E.channel.id,"agent_transfer","Channel State Updated to ["+E.user_ivr_state+"]"));break;case"1":"*"==E.transDtmf&&"TRANSFER_CASE_DTMF"==E.user_ivr_state&&(E.transDtmf=E.transDtmf+e.digit,logger.log("DEB",E.channel.id,"agent_transfer","group DTMF("+E.transDtmf+")"),"*1"==E.transDtmf?(E.flagTransferDtmfStarOne="1",logger.log("DEB",E.channel.id,"agent_transfer","transfer limit ("+E.callTransferRestrictionCount+")"),E.callTransferRestrictionCount<1?("0"==E.transHoldFlag&&("0"!=E.dbMusicOnHoldPrompt?(logger.log("DEB",E.channel.id,"agent_transfer","Hold (custom) class "+E.smeID),E.startMohClass=E.smeID):(E.startMohClass="Default",logger.log("DEB",E.channel.id,"agent_transfer","Hold (default) class")),E.client.channels.startMoh({channelId:E.channel.id,mohClass:E.startMohClass},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while HOLD startMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Customer ON HOLD startMoh now..."),E.transHoldFlag="1")})),E.transType="UNATTENDANT_CALL_TRANSFER",E.user_ivr_state="req_UNATTENDANT_CALL_TRANSFER",E.agent_extention="",E.whichtransLeg="ORIGNAL_AGENT",logger.log("DEB",E.channel.id,"agent_transfer","Call Leg is now ("+E.whichtransLeg+")"),E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_FOR_TRANSFER"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")})):logger.log("DEB",E.channel.id,"agent_transfer","transfer limit expired ("+E.callTransferRestrictionCount+")")):logger.log("DEB",E.channel.id,"agent_transfer","invalid group DTMF("+E.transDtmf+")"))}}function _(e,n){logger.log("IMP",E.channel.id,"agent_transfer","ON Event [on_hangup]"),logger.log("DEB",E.channel.id,"agent_transfer","Inside on_hangup"),logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [cleanup]"),E.channel.removeListener("ChannelHangupRequest",_),null!=E.agentChannel&&logger.log("DEB",E.channel.id,"agent_transfer","removeListener of ChannelDtmfReceived"),logger.log("DEB",E.channel.id,"agent_transfer","State-Machine Update to ==> [Event.HANGUP]"),E.state_machine.change_state(Event.HANGUP)}function f(e,n){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [hangupAgentLeg]"),logger.log("DEB",E.channel.id,"agent_transfer","Killing Agent Leg session.name("+n.id+") channel.name("+e.name+")"),n.hangup(function(e){})}function h(e,n,a){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [addTransfreeChannelsToBridge]"),logger.log("DEB",E.channel.id,"agent_transfer","Adding channel "+e.name+" and transfree channel "+n.name+" to bridge: "+a.id),logger.log("DEB",E.channel.id,"agent_transfer","[[[[[[[[[[[[[[[[[[[[[[ transfree channel "+n.id+" added to bridge: "+a.id+"]]]]]]]]]]]]]]]]]]]]]]"),a.addChannel({channel:n.id},function(e){if(e)throw e;E.BRIDGED_TIME=(new Date).getTime();e=parseInt(E.BRIDGED_TIME/1e3);logger.log("DEB",E.channel.id,"agent_transfer","Time When bridged:"+e)})}function a(){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [DTMF_Timeout]"),"transfer_dtmf_input"==E.timerState&&"1"==E.flagTransferDtmfStarOne&&(E.noDtmfTransferCount++,E.noDtmfTransferCount<=3?(logger.log("DEB",E.channel.id,"timer [SNOOPING_FOR_TRY_AGAIN_LATER] sending.."),E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_FOR_TRY_AGAIN_LATER"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")})):"0"!=E.transHoldFlag&&("1"==E.flagTransferDtmfStarOne&&(logger.log("DEB",E.channel.id,"agent_transfer","[timerTransferDtmf] timer initialize.."),E.objTransferDtmfStarOne=setTimeout(a,1e3*cfg.timer.transfer_dtmf_timer),E.timerState="transfer_dtmf_input"),E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")}),E.client.channels.unhold({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_transfer","["+this.state_name+"]: error while UNHOLD customer: "+e):(logger.log("DEB",E.channel.id,"agent_transfer","Channel UNHOLD now..."),E.transHoldFlag="0")})))}function r(){logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [hold_call_reminder]"),"0"!=E.transHoldFlag&&(E.transferLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.transferLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.transferLeg.id+")")}),logger.log("DEB",E.channel.id,"agent_transfer","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(r,1e3*cfg.timer.call_hold_reminder_to_agent_timer))}function u(e,n){if(logger.log("IMP",E.channel.id,"agent_transfer","ON Event [channelStateChange - "+n.state+"]"),logger.log("DEB",E.channel.id,"agent_transfer","State channelStateChange  Name:"+n.name+", State:"+n.state),"Up"==n.state){E.transferLegInit=!0,logger.log("DEB",E.channel.id,"agent_transfer","set transferLegInit true"),agentProcessor.updateLiveCallTransfer(E,"1"),E.TransferAgentConnectedStartTime=dateTime.getAgentDateTime(),E.TransferAgentRingingEndTime=dateTime.getAgentDateTime(),E.TransferAgentRingingDuration=dateTime.calculateDuration(E.TransferAgentRingingStartTime,E.TransferAgentRingingEndTime),logger.log("DEB",E.channel.id,"agent_transfer","AgentRingingDuration("+E.TransferAgentRingingDuration+")"),logger.log("IMP",E.channel.id,"agent_transfer","transferLegState Changed ["+E.transferLegState+" => connected]"),E.transferLegState="connected",logger.log("DEB",E.channel.id,"agent_transfer","updateTransferAgent to AnswerFlag(answer-0)");var a=n.id,r="1",t="0";logger.log("IMP",E.channel.id,"agent_transfer","Internal Function [updateTransferAgent]"),logger.log("DEB",E.channel.id,"agent_transfer","transferAgentArray length ("+E.transferAgentArray.length+")");for(var g=0;g<E.transferAgentArray.length;g++){var l=E.transferAgentArray[g];l.Call_SessionID==a&&(logger.log("DEB",E.channel.id,"agent_transfer","Agent "+l.Which_CallLeg+" from transferAgentArray detail (CallSessionID("+l.Call_SessionID+"), AgentID("+l.Agent_ID+"), AgentGroup("+l.Agent_Group+"), AgentNumber("+l.Agent_Number+") AnswerFlag("+l.Answer_Flag+"))"),"1"==r)&&(logger.log("DEB",E.channel.id,"agent_transfer","Update the AnswerFlag to ("+t+")"),l.Answer_Flag=t)}E.transAgenAnswerStatus="0"}else"Ringing"==n.state?(E.TransferAgentRingingStartTime=dateTime.getAgentDateTime(),logger.log("DEB",E.channel.id,"agent_transfer","Ringing:  "+n.id),logger.log("IMP",E.channel.id,"agent_transfer","transferLegState Changed ["+E.transferLegState+" => ringing]"),E.transferLegState="ringing"):logger.log("DEB",E.channel.id,"agent_transfer",n.state+":  "+n.id)}logger.log("DEB",E.channel.id,"agent_transfer","Entering agent_transfer_state: agent_transfer_state"),E.ringTime=0,E.ccEndNode="CCG_"+E.allocated_agent+"_"+E.ringTime+"_"+E.dialStatus,E.dialedLeg.on("ChannelDtmfReceived",c),"req_ATTENDANT_CALL_TRANSFER"==E.user_ivr_state||"req_UNATTENDANT_CALL_TRANSFER"==E.user_ivr_state?(E.agent_extention="",E.transferLeg=E.dialedLeg,E.noDtmfTransferCount++,E.dialedLeg.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.dialedLeg.id,spy:"out",whisper:"out",appArgs:"SNOOPING_FOR_TRANSFER"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_transfer","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_transfer","Channel snoopChannel on("+E.dialedLeg.id+")")})):logger.log("DEB",E.channel.id,"agent_transfer","invalid group DTMF("+E.transDtmf+")")}}module.exports=AgentOutgoingCall;