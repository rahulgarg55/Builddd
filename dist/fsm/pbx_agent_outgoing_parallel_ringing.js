var Event=require("../events"),cfg=require("../../../pbx_config"),pbx_db=require("../pbx_db"),pbx_api=require("../api/pbx_api.js"),pbx_logger=require("../logger/pbx_logger.js"),express=require("express"),dt=require("../common/datetime.js"),agentcdr=require("../agentCdr"),agent_processor=require("../agent_processor"),awsS3=require("../s3/awsS3.js"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv"),logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,awsS3=new awsS3,dbOutput="",dbSMEid="",api=new pbx_api,agentCdrPrefix=cfg.agentCdr.path+"/"+cfg.agentCdr.title,agentCdrWriter=(logger.log("DEB",0,"agent_outgoing_parallel_ringing","Debug: Initializing Agent CDRs ("+agentCdrPrefix+")"),new agentcdr(agentCdrPrefix));function AgentOutgoingCall(m){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [AgentOutgoingCall]"),this.state_name="user_agent_state",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Current State ["+m.currentState+"] Update to ==> [dialing]"),m.currentState="dialing",m.dialStatus="NOANSWER";m.totalHoldDuration=0,this.enter=function(){var n,e,g;new pbx_db;function s(e){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_playback_finished]"),console.log(e),n&&n.id==e.playback.id&&m.channel&&(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Played Promot ("+e.playback.media_uri+") finished"),"YOUR_CALL_IMPT_TO_US"==m.user_ivr_state?(m.client.removeListener("PlaybackFinished",s),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),m.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_IMPT_TO_US_15SEC"==m.user_ivr_state?(m.client.removeListener("PlaybackFinished",s),"1"==m.firststickyAgentFlag&&(m.hardStickyAPIcallFlag=!0),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),m.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_GET_RECORDED"==m.user_ivr_state&&(logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","on_playback_finished: ("+e+")"),console.log(e),1!=m.mainLegDinit?logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","on YOUR_CALL_GET_RECORDED media finished, originate call to customer."):logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore originate call to agent")))}function u(){logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","cleanup request.."),m.channel.removeListener("ChannelHangupRequest",t),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(m),null!=m.agentChannel&&(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","removeListener of ChannelDtmfReceived"),m.agentChannel.removeListener("ChannelDtmfReceived",i))}function i(e,n){switch(logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_dtmf]"),e.digit){case"*":m.transDtmf=e.digit,m.user_ivr_state="TRANSFER_CASE_DTMF";break;case"#":"0"==m.transHoldFlag?(m.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:m.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+m.agentDialed.id+")")}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[hold_call_reminder] timer initialize.."),m.objReminderCallHoldToAgent=setTimeout(l,1e3*cfg.timer.call_hold_reminder_to_agent_timer),"0"!=m.dbMusicOnHoldPrompt?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Hold (custom) class "+m.smeID),m.startMohClass=m.smeID):(m.startMohClass="Default",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Hold (default) class")),m.client.channels.startMoh({channelId:m.channel.id,mohClass:m.startMohClass},function(e){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","["+this.state_name+"]: error while HOLD startMoh customer: "+e):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Customer ON HOLD startMoh now..."),m.transHoldFlag="1")})):(m.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:m.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+m.agentDialed.id+")")}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","lets clear the timer objReminderCallHoldToAgent"),clearTimeout(m.objReminderCallHoldToAgent),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","UnHold (default)"),m.client.channels.stopMoh({channelId:m.channel.id},function(e){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Channel UNHOLD now..."),m.transHoldFlag="0")}))}}function t(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_hangup]"),0!=m.AgentConnectedStartTime?(m.AgentConnectedEndTime=dateTime.getAgentDateTime(),m.AgentConnectedDuration=dateTime.calculateDuration(m.AgentConnectedStartTime,m.AgentConnectedEndTime)):m.AgentConnectedDuration="0",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+m.AgentConnectedDuration+")"),m.CustomerConnectedDuration=m.AgentConnectedDuration,"none"==m.calldisconnectedBy&&(m.calldisconnectedBy="agent_disconnect"),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Init [cleanup]"),u(),m.client.removeListener("PlaybackFinished",s),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => HANGUP]"),m.state_machine.change_state(Event.HANGUP)}function D(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [hangupDialed]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Channel "+e.name+" left our application, hanging up dialed channel: "+n.name),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Init [dialed.hangup]"),n.hangup(function(e){})}function l(){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [hold_call_reminder]"),logger.log("DEB",m.channel.id,"timer [hold_call_notification] expired! & transHoldFlag("+m.transHoldFlag+")"),"1"==m.transHoldFlag&&(m.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:m.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+m.agentDialed.id+")")}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[hold_call_reminder] timer initialize.."),m.objReminderCallHoldToAgent=setTimeout(l,1e3*cfg.timer.call_hold_reminder_to_agent_timer))}function r(e,n){if("Up"==n.state)logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [Up] of{"+e.channel.id+"}"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Up:  "+n.id),m.dialedLegInit=!0,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","set dialedLegInit true"),m.CustomerConnectedStartTime=dateTime.getAgentDateTime();else if("Ringing"==n.state){console.log(e),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [Ringing] of{"+e.channel.id+"}"),m.AgentRingingDuration="0",m.AgentRingingStartTime=dateTime.getAgentDateTime();var g=e.channel.id;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [updateRingingStartTime]");for(var l=0;l<m.apiAgentParallelRingingArray.length;l++){var a=m.apiAgentParallelRingingArray[l];a.dialed.id==g&&(a.RingingStartTime=dateTime.getAgentDateTime(),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","updating RingingStartTime("+a.RingingStartTime+") for id("+g+")"))}logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Ringing:  "+n.id),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","dialedLegState Changed ["+m.dialedLegState+" => ringing]"),m.dialedLegState="ringing",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Ringing: time "+m.AgentRingingStartTime),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")}else logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event ["+n.state+"]")}logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Entering user_agent_state: user_agent_state"),m.ringTime=0,m.ccEndNode="CCG_"+m.allocated_agent+"_"+m.ringTime+"_"+m.dialStatus,m.client.on("PlaybackFinished",s),"FAILED_TRANSFER_CASE"!=m.user_ivr_state?(e=function(e,n,g){if(e)logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","Error thrown at url call"+e);else if(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","result.status("+g.status+"), mainLegDinit("+m.mainLegDinit+")"),"1"==g.status&&0<g.data.agent_details.length&&1!=m.mainLegDinit)for(var l=0;l<g.data.agent_details.length;l++){logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","idealAgentStatus:"+g.data.agent_details[l].status),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","idealAgentID:"+g.data.agent_details[l].agent_id),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","idealAgentNumber:"+g.data.agent_details[l].agent_mobile),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","idealAgentGroup:"+g.data.agent_details[l].group_name),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","stickyAgentFlag:"+g.data.agent_details[l].stickyAgentFlag),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","idealAgentMasking:"+g.data.agent_details[l].idealAgentMasking);var a=m.client.Channel();logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","dialed.id:"+a.id),m.apiAgentParallelRingingArray.push({AgentId:g.data.agent_details[l].agent_id,AgentNumber:g.data.agent_details[l].agent_mobile,AgentGroup:g.data.agent_details[l].group_name,idealAgentStatus:g.data.agent_details[l].status,stickyAgentFlag:g.data.agent_details[l].stickyAgentFlag,idealAgentMasking:g.data.agent_details[l].idealAgentMasking,dialed:a,StartTime:dateTime.getAgentDateTime(),EndTime:0,RingingStartTime:0,RingingEndTime:0,Ringingduration:0,TotalDuration:0,CdrCreatedFlag:0,isCallAnswered:0}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","apiAgentParallelRingingArray.length("+m.apiAgentParallelRingingArray.length+")"),a.on("ChannelStateChange",r),agentProcessor.addLiveCallPR(m,m.callstartDateTime,m.called_number,a.id,m.calling_number,g.data.agent_details[l].agent_mobile,g.data.agent_details[l].agent_id,"0",m.smeID,cfg.server.self_ip,"Incoming"),!function(p,e,n){{var g,l;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [originate]"),1!=m.mainLegDinit&&(g="",g=m.outVirtualNo,m.AgentStartCallTime=dateTime.getAgentDateTime(),m.agentChannel=e,m.agentDialed=e,m.dialedLeg=e,n="SIP/"+n+"@"+cfg.asterisk.gw_ipaddr_port,g="ed_kommuno <"+g+">",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Current State ["+m.currentState+"] Update to ==> [originating]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","callerID("+g+"), endPoint("+n+")"),m.currentState="originating",m.originateTime=(new Date).getTime(),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Call Originate Time :  "+m.originateTime),m.waitingTime=(m.originateTime-m.startTime)/1e3,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing"," Waiting  time : [",m.waitingTime,"]"),l="channel:"+m.channel.id,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","stasisApp app name: "+cfg.asterisk.stasisApp),m.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:l},function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","Error while subscribing for channel!!"):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Subscribed for channel successfully")}),e.on("Ring",function(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [Ring - dialed], dialed.id("+n.id+")")}),m.client.channels.ring({channelId:m.channel.id},function(e){e&&logger.log("['ERR', call.channel.id, 'agent_outgoing_parallel_ringing', "+this.state_name+"]: Error in Ringing Function "+e)}),e.on("ChannelHold",function(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelHold - dialed]")}),e.on("ChannelUnhold",function(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelUnhold - dialed]")}),e.originate({endpoint:n,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:g},function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","Error in dialing("+e+")"):(m.dialedLegOriginate=!0,logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Init [dialed.originate..]"),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","dialedLegState Changed ["+m.dialedLegState+" => originating]"),m.dialedLegState="originating",m.dialedLegDinit=!1,m.writeCdrFlag=!1,m.dialedLeg.on("ChannelDtmfReceived",i),m.dialedLeg.on("ChannelHangupRequest",t),m.dialedLeg.on("PlaybackFinished",s))}),e.on("ChannelDestroyed",function(e,n){var g,l,a;if(logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelDestroyed - dialed]"),m.dialedAnsweredLeg&&n&&m.dialedAnsweredLeg.id==n.id)logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","its answered dialed case.."),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Inside dialed ChannelDestroyed, Current State ["+m.currentState+"]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Agent call disconneced, Reason_Cause["+e.cause+"] Cause_Msg["+e.cause_txt+"]"),m.agentCallResponseCode=e.cause,m.agentCallResponseMsg=e.cause_txt,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration is("+m.AgentRingingDuration+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedStartTime is("+m.AgentConnectedStartTime+")"),m.AgentConnectedEndTime=dateTime.getAgentDateTime(),(m.AgentRingingDuration<="0"||isNaN(m.AgentRingingDuration))&&(m.AgentRingingEndTime=dateTime.getAgentDateTime(),m.AgentRingingDuration=dateTime.calculateDuration(m.AgentRingingStartTime,m.AgentRingingEndTime)),0!=m.AgentConnectedStartTime?(m.AgentConnectedEndTime=dateTime.getAgentDateTime(),m.AgentConnectedDuration=dateTime.calculateDuration(m.AgentConnectedStartTime,m.AgentConnectedEndTime)):m.AgentConnectedDuration="0",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration("+m.AgentRingingDuration+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+m.AgentConnectedDuration+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),m.dialedLegDinit=!0,m.AgentConnectedStartTime="0",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","set dialedLegDinit true"),"1"==m.callRecordingStatus&&0==m.transferLegInit?"mp3"==cfg.system.recording_type?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","active recording, need to stop!"),console.log("Accepted recording",m.callRecordedFile),m.client.recordings.stop({recordingName:m.callRecordedFile},function(e){}),g=m.callRecordedFile+".wav",l="/var/spool/asterisk/recording/"+m.callRecordedFile+".wav",e=cfg.media.rec_dir+"/"+m.callRecordedFile+".mp3",a=cfg.media.rec_dir+"/"+m.smeID,fs.existsSync(a)||fs.mkdirSync(a),m.callRecordedFile=OLD_PATH,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","RECORDING Successfully Done ("+l+")"),m.callRecordedFile=l,m.s3RecordedFile=e,m.s3RecordedFileWav=l,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","storing recording in DB.."),m.callDirection="INCOMING",e=`ffmpeg -i ${m.s3RecordedFileWav} -codec:a libmp3lame -qscale:a 2 `+m.s3RecordedFile,exec(e,(e,n,g)=>{e?(logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","ENCODING failed, store failed recording. SaveS3FailedRecordingData error"+e),logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","file encoded failed to mp3 "+m.s3RecordedFile+" from wav "+m.s3RecordedFileWav),agentProcessor.SaveS3FailedRecordingData(m)):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","file encoded to mp3 "+m.s3RecordedFile+" from wav "+m.s3RecordedFileWav),null!=m.s3RecordedFile&&0!=m.s3RecordedFile.length&&awsS3.s3Upload(m,m.smeID,m.s3RecordedFile,m.s3RecordedFile,function(e,n){e?(logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","UPLOAD s3Upload failed, store for retry"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","UPLOAD to s3 failed, store failed recording. SaveS3FailedRecordingData"),agentProcessor.SaveS3FailedRecordingData(m)):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","UPLOAD S3 s3Upload Received: "+n.Location),console.log(n),m.s3uploadedUrl=n.Location,m.callDirection="INCOMING",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(m),fs.unlink(m.s3RecordedFileWav,e=>{e?(logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting wav recording file("+m.s3RecordedFileWav+"):",e),console.error(e)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting wav recording file"+m.s3RecordedFileWav)}),fs.unlink(m.s3RecordedFile,e=>{e?(logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting mp3 recording file("+m.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting mp3 recording file"+m.s3RecordedFile)}))}))})):"wav"==cfg.system.recording_type?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","active recording, need to stop!"),console.log("Accepted recording",m.callRecordedFile),m.client.recordings.stop({recordingName:m.callRecordedFile},function(e){}),g=m.callRecordedFile+".wav",l="/var/spool/asterisk/recording/"+m.callRecordedFile+".wav",a=cfg.media.rec_dir+"/"+m.smeID,fs.existsSync(a)||fs.mkdirSync(a),m.callRecordedFile=l,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","RECORDING Successfully Done ("+l+")"),m.callRecordedFile=l,m.s3RecordedFile=l,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","storing recording in DB.."),m.callDirection="INCOMING",null!=m.s3RecordedFile&&0!=m.s3RecordedFile.length&&awsS3.s3Upload(m,m.smeID,m.s3RecordedFile,g,function(e,n){e?logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","s3Upload failed"):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","s3Upload Received: "+n.Location),console.log(n),m.s3uploadedUrl=n.Location,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(m),fs.unlink(m.s3RecordedFile,e=>{e?(logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting wav recording file("+m.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting wav recording file"+m.s3RecordedFile)}))})):logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","invalid recording format mentioned in cfg file. ("+cfg.system.recording_type+")"):"1"==m.callRecordingStatus&&1==m.transferLegInit?logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","active recording, but transfer call going on.."):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","No active recording!"),m.callInfo="incoming",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","generating agent cdr for agent call reporting (failed to answer)"),0==m.writeCdrFlag?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),m.writeCdrFlag=!0,agentProcessor.logAgentCdr(m)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(m),m.idealAgentFlag="0;","originating"==m.currentState?(m.disconnectStatus="NOANSWER",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing",""),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Init [cleanup]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing",""),u(),"0"==m.transferCallFlag&&(m.client.removeListener("PlaybackFinished",s),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),m.state_machine.change_state(Event.AGENT_CALL))):"feedback"==m.currentState?logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing"," call current state is : ["+m.currentState+"]"):("user_disconnect"!=m.currentState&&(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Current State ["+m.currentState+"] Update to ==> [agent_disconnect]"),m.currentState="agent_disconnect",m.disconnectStatus="AGENT",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing"," Call disconnected by agent")),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLegInit("+m.mainLegInit+") & mainLegDinit("+m.mainLegDinit+") & transferCallFlag("+m.transferCallFlag+")  call.mainLegState("+m.mainLegState+")"),"connected"!=m.mainLegState&&"originating"!=m.mainLegState&&"ringing"!=m.mainLegState||1!=m.mainLegInit||0!=m.mainLegDinit||"0"!=m.transferCallFlag?logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for mainLeg from dialed...."):(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),m.mainLegDinit=!0,m&&m.aBridge&&m.aBridge.destroy&&m.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),m.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+m.transferLegInit+") & transferLegDinit("+m.transferLegDinit+") & transferCallFlag("+m.transferCallFlag+")  call.transferLegState("+m.transferLegState+")"),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+m.transferLegInit+") & transferLegDinit("+m.transferLegDinit+") & transferCallFlag("+m.transferCallFlag+")  call.transferLegState("+m.transferLegState+")"),"connected"==m.transferLegState&&1==m.transferLegInit&&0==m.transferLegDinit?(0==m.writeCdrFlag?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),m.writeCdrFlag=!0,agentProcessor.logAgentCdr(m)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(m),m.idealAgentFlag="0;"):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg"));else if(n&&n.id){logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","agent tried once in Parallel Ringing so lets clear it("+n.id+")");var i=n.id;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [clearTriedCall]");for(var t=0;t<m.apiAgentParallelRingingArray.length;t++){var r,o,d,_,c=m.apiAgentParallelRingingArray[t];c.dialed.id==i&&(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","("+c.dialed.id+"), clear the leg.."),D(m.channel,c.dialed),agentProcessor.freeAgentPR(m,c.AgentId,c.AgentNumber,c.AgentGroup),agentProcessor.removeLiveCallPR(m,c.dialed.id),o=r="0",r=0!=c.RingingStartTime?(o=dateTime.getAgentDateTime(),dateTime.calculateDuration(c.RingingStartTime,o)):"0",c.RingingEndTime=o,c.Ringingduration=r,d=dateTime.getAgentDateTime(),_=dateTime.calculateDuration(m.AgentStartCallTime,d),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","RingingStartTime ("+c.RingingStartTime+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aRingingEndTime ("+o+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aRingingDuration ("+r+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aAgentEndCallTime ("+d+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aAgentCallDuration ("+_+")"),"0"==c.CdrCreatedFlag&&(c.CdrCreatedFlag="1",agentProcessor.logAgentCdrPR(m,m.idealAgentReportFlag,m.smeID,c.AgentId,"1",m.agentCallResponseCode,m.AgentStartCallTime,d,_,c.AgentGroup,"0",m.callSessionId,m.callMode,m.callInfo,r,"0","parallel ringing")),m.apiAgentParallelRingingArray.splice(t,1),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","removed "+i+", Agent("+c.AgentNumber+" | "+c.AgentId+") from apiAgentParallelRingingArray, length("+m.apiAgentParallelRingingArray.length+")"))}0<m.apiAgentParallelRingingArray.length||(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","apiAgentParallelRingingArray is empty so lets disconnect the customer call."),m.calldisconnectedBy="system",m.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")}))}else logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing its unanswered dailed case")}),e.on("StasisStart",function(e,n){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [StasisStart - dialed]"),m.dialedLegInit=!0,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","set dialedLegInit true");var g=n.id;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [clearUnansweredCalls]");for(var l=0;l<m.apiAgentParallelRingingArray.length;l++){var a,i,t,r,o=m.apiAgentParallelRingingArray[l];o.dialed.id!=g?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","("+o.dialed.id+"), clear the answered leg.."),D(m.channel,o.dialed),agentProcessor.freeAgentPR(m,o.AgentId,o.AgentNumber,o.AgentGroup),agentProcessor.removeLiveCallPR(m,o.dialed.id),i=a="0",a=0!=o.RingingStartTime?(i=dateTime.getAgentDateTime(),dateTime.calculateDuration(o.RingingStartTime,i)):"0",o.RingingEndTime=i,o.Ringingduration=a,t=dateTime.getAgentDateTime(),r=dateTime.calculateDuration(m.AgentStartCallTime,t),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","RingingStartTime ("+o.RingingStartTime+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aRingingEndTime ("+i+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aRingingDuration ("+a+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aAgentEndCallTime ("+t+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","aAgentCallDuration ("+r+")"),"0"==o.CdrCreatedFlag&&(o.CdrCreatedFlag="1",agentProcessor.logAgentCdrPR(m,m.idealAgentReportFlag,m.smeID,o.AgentId,"1",m.agentCallResponseCode,m.AgentStartCallTime,t,r,o.AgentGroup,"0",m.callSessionId,m.callMode,m.callInfo,a,"0","parallel ringing"))):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","("+o.dialed.id+"), dont clear the answered leg.."),o.isCallAnswered="1")}m.dialedAnsweredLeg=n;var d=m,_=n.id;logger.log("IMP",d.channel.id,"agent_outgoing_parallel_ringing","Internal Function [getAnsweredAgentDetails]");for(var c=0;c<d.apiAgentParallelRingingArray.length;c++){var s=d.apiAgentParallelRingingArray[c];s.dialed.id==_&&(s.RingingStartTime=dateTime.getAgentDateTime(),d.idealAgentStatus=s.idealAgentStatus,d.idealAgentID=s.AgentId,d.idealAgentNumber=s.AgentNumber,d.stickyAgentFlag=s.stickyAgentFlag,d.idealAgentMasking=s.idealAgentMasking,d.idealAgentGroup=s.AgentGroup,logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Number("+d.idealAgentNumber),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent ID("+d.idealAgentID),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Group("+d.idealAgentGroup),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Status("+d.idealAgentStatus),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Masking("+d.idealAgentMasking),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Sticky("+d.stickyAgentFlag))}m.AgentConnectedStartTime=dateTime.getAgentDateTime(),m.AgentRingingEndTime=dateTime.getAgentDateTime(),m.AgentRingingDuration=dateTime.calculateDuration(m.AgentRingingStartTime,m.AgentRingingEndTime),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration("+m.AgentRingingDuration+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),m.callpatchedAgentId=m.idealAgentID,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Stasis Started for dialed:  "+n.id),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Stasis Started time : "+m.startTime),u=p,h=n,logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [createBridge]"),m.client.Bridge().create({type:"mixing,dtmf_events,proxy_media"},function(e,n){if(logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.create]"),e)throw e;var g,l;m.aBridge=n,m.callBridgeId=n.id,m.callBridge=n,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[[[[[[[[[[[[[[[[[[[[[Created bridge: "+n.id+"]]]]]]]]]]]]]]]]]]]]]]]]]]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Created bridge: "+n.id),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","addChannelsToBridge "+u.id+" to bridge "+n.id),e=u,g=h,l=n,logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [addChannelsToBridge]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Adding channel "+e.name+" and dialed channel "+g.name+" to bridge: "+l.id),l.addChannel({channel:[e.id,g.id]},function(e){if(e)throw e;m.BRIDGED_TIME=(new Date).getTime();e=parseInt(m.BRIDGED_TIME/1e3);logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Time When bridged:"+e)}),m.AgentStatus=0,"2"==m.callanswerFlag&&(m.callanswerFlag="1"),"1"==m.callfinalStatus&&(m.callfinalStatus="0"),"none"==m.callpatchedAgentGroup&&(m.callpatchedAgentGroup=m.idealAgentGroup),"none"==m.callpatchedAgentId&&(m.callpatchedAgentId=m.idealAgentID),"false"==m.callcdrFlag&&(m.callcdrFlag="true;"),"1"==m.smerecording&&(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","enabled SME recording flag: "+m.smerecording),m.callRecordedFileRaw="AIR_"+m.channel.id+"_"+Date.now().toString(),m.callRecordedFile=m.smeID+"/"+m.callRecordedFileRaw,m.client.bridges.record({bridgeId:n.id,format:"wav",name:m.callRecordedFile},e=>{}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Recording started @: "+m.callRecordedFile),m.callRecordingStatus="1")}),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Calling updateLiveCall......."),agentProcessor.updateLiveCallPR(m,"1",n.id),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Dialed Channel Answered. Inform CRM about patching here"),m.dialStatus="ANSWER",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Dial Status change to  : ["+m.dialStatus+"]"),m.answerTime=(new Date).getTime();var u,h,n=parseInt(m.answerTime/1e3),n=(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","answer time is "+n),m.ringTime=(m.answerTime-m.originateTime)/1e3,m.ccEndNode="CCG_"+m.allocated_agent+"_"+m.ringTime+"_"+m.dialStatus,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing"," Ring Time : ["+m.ringTime+"] and CCG endNode is : ["+m.ccEndNode+"]"),m.gliveEvents.includes("evt_connected"));logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","returnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"+n),1==n?(m.activeEvents="evt_connected",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","SME("+m.smeID+") subscribed for evt_connected"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","initiate live event................................................."),agentProcessor.funcNotifyCrmIncomingCalls(m,"evt_connected")):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","SME("+m.smeID+") not subscribed for evt_connected from("+m.gliveEvents+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Will send notify for channel "+p.id+" and caller: "+p.caller.number),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Current State ["+m.currentState+"] Update to ==> [patched]"),m.currentState="patched"}),e.on("StasisEnd",function(e,n){logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing",""),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [StasisEnd-dialed] "+n.id),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing",""),m.dialedLegDinit=!0,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","set dialedLegDinit true"),0!=m.AgentConnectedStartTime?(m.AgentConnectedEndTime=dateTime.getAgentDateTime(),m.AgentConnectedDuration=dateTime.calculateDuration(m.AgentConnectedStartTime,m.AgentConnectedEndTime)):m.AgentConnectedDuration="0",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+m.AgentConnectedDuration+")"),m.CustomerConnectedDuration=m.AgentConnectedDuration,"none"==m.calldisconnectedBy&&(m.calldisconnectedBy="agent_disconnect"),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLegInit("+m.mainLegInit+") & mainLegDinit("+m.mainLegDinit+") & transferCallFlag("+m.transferCallFlag+")  call.mainLegState("+m.mainLegState+")"),"connected"!=m.mainLegState&&"originating"!=m.mainLegState&&"ringing"!=m.mainLegState||1!=m.mainLegInit||0!=m.mainLegDinit||"0"!=m.transferCallFlag?logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for mainLeg from dialed...."):(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),m.mainLegDinit=!0,m&&m.aBridge&&m.aBridge.destroy&&m.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),m.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","dialedLegDinit("+m.dialedLegDinit+") & transferLegDinit("+m.transferLegDinit+") & mainLegDinit("+m.mainLegDinit+")"),1==m.dialedLegDinit&&1==m.transferLegDinit&&0==m.mainLegDinit?(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),m&&m.aBridge&&m.aBridge.destroy&&m.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),m.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing",".. do nothing for mainLeg from dialed...."),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+m.transferLegInit+") & transferLegDinit("+m.transferLegDinit+") & transferCallFlag("+m.transferCallFlag+")  call.transferLegState("+m.transferLegState+")"),"connected"==m.transferLegState&&1==m.transferLegInit&&0==m.transferLegDinit?(0==m.writeCdrFlag?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),m.writeCdrFlag=!0,agentProcessor.logAgentCdr(m)):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(m),m.idealAgentFlag="0;"):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg")}))}}(m.channel,a,g.data.agent_details[l].agent_mobile)}else logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","Error while getting agents for sme"),"1"==m.smevoicemail?m.callvoicemailstate="PLAY_WELCOME":m.callvoicemailstate="NO_VOICEMAIL",m.client.removeListener("PlaybackFinished",s),logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => VOICEMAIL]"),m.state_machine.change_state(Event.VOICEMAIL)},"0"==m.initOnHangup?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing",m.firststickyAgentFlag+"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++call.firststickyAgentFlag"),"1"==m.firststickyAgentFlag?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","very special sticky case... should come only here is hard sticky"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","customerStickyFlag("+m.customerStickyFlag+"), firststickyAgentFlag("+m.firststickyAgentFlag+"), idealAgentStatus("+m.idealAgentStatus+"),"),1==m.hardStickyAPIcallFlag?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Check sticky agent status"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[GET_AGENT_STATUS] for smeID("+m.smeID+")"),api.getFreeAgentParallelRinging(m.channel.id,m.smeID,m.catDescAgent,"Random",m.calling_number,"",m.smeStickyAlgo,m.parallelRingingChannels,m.callSessionId,m.queue_name,m.queue_id,e),m.hardStickyAPIcallFlag=!1):m.queue_tried_counter>=m.queue_limit?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Agent Queue limit "+m.queue_limit+" exceeded (hard sticky only)"),"1"==m.smevoicemail?m.callvoicemailstate="PLAY_WELCOME":m.callvoicemailstate="NO_VOICEMAIL",logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => VOICEMAIL]"),m.state_machine.change_state(Event.VOICEMAIL)):(m.firststickyAgentFlag="1",m.user_ivr_state="YOUR_CALL_IMPT_TO_US_15SEC",logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","queue_tried_counter++"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","hard sticky only @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....before:"+m.queue_tried_counter),m.queue_tried_counter++,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hard sticky only@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....after:"+m.queue_tried_counter),m.currentState,logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [start_playback]"),"YOUR_CALL_IMPT_TO_US"==m.user_ivr_state?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_IMPT_TO_US)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call+"-"+m.language,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,m.gmediaFile=current_sound,n=m.client.Playback(),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel:",m.channel.caller),m.channel&&1!=m.mainLegDinit?m.channel.play({media:current_sound},n,function(e,n){e&&logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","...In Playback Handler:"+e)}):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel not available")):"YOUR_CALL_IMPT_TO_US_15SEC"==m.user_ivr_state?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_IMPT_TO_US_15SEC)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call_15sec+"-"+m.language,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,m.gmediaFile=current_sound,n=m.client.Playback(),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel:",m.channel.caller),m.channel&&1!=m.mainLegDinit?m.channel.play({media:current_sound},n,function(e,n){logger.log("ERR",m.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel not available")):"YOUR_CALL_GET_RECORDED"==m.user_ivr_state?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_GET_RECORDED)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_get_recorded+"-"+m.language,logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,m.gmediaFile=current_sound,n=m.client.Playback(),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel:",m.channel.caller),m.channel&&1!=m.mainLegDinit?m.channel.play({media:current_sound},n,function(e,n){logger.log("ERR",m.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","channel not available")):logger.log("ERR",m.channel.id,"agent_outgoing_parallel_ringing","Invalid ivr state! ("+m.user_ivr_state+")"))):(g=function(e,n,g){logger.log("IMP",m.channel.id,"agent_outgoing_parallel_ringing","Internal Function [getUsedAgentList]"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","getUsedAgentList: AgentID("+e+"), catDesc("+g+"), AgentNumber("+n+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","apiAgentArray length ("+m.apiAgentArray.length+")");for(var l="",a=0;a<m.apiAgentArray.length;a++){var i=m.apiAgentArray[a];l=l+","+i.AgentId}return logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","already tried agents List ("+l+")"),l}((m.channel.id,m.idealAgentID),m.idealAgentNumber,m.catDescAgent),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","getUsedAgentList return ("+g+")"),""!=g?(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Calling API getNextFreeAgent with Param, smeID:"+m.smeID+" & type:1 & agentList:("+g+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[GET_FREE_AGENT] for smeID("+m.smeID+") & type:1 & agentList:("+g+")"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT other time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),1!=m.mainLegDinit?api.getFreeAgentParallelRinging(m.channel.id,m.smeID,m.catDescAgent,"Random",m.calling_number,g,m.smeStickyAlgo,m.parallelRingingChannels,m.callSessionId,m.queue_name,m.queue_id,e):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore getFreeAgentParallelRinging")):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT first time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","Calling API getNextFreeAgent with Param, smeID:"+m.smeID+" & type:1"),logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","[GET_FREE_AGENT] for smeID("+m.smeID+") & type:1"),1!=m.mainLegDinit?api.getFreeAgentParallelRinging(m.channel.id,m.smeID,m.catDescAgent,"Random",m.calling_number,"",m.smeStickyAlgo,m.parallelRingingChannels,m.callSessionId,m.queue_name,m.queue_id,e):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore getFreeAgentParallelRinging")))):logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","No Hunting of free agent because initOnHangup:"+m.initOnHangup+" is already activated.")):(logger.log("DEB",m.channel.id,"agent_outgoing_parallel_ringing","FAILED_TRANSFER_CASE back to dialed session"),m.dialedLeg.on("ChannelDtmfReceived",i),m.dialedLeg.on("PlaybackFinished",s),m.dialedLeg.on("ChannelHangupRequest",t))}}module.exports=AgentOutgoingCall;