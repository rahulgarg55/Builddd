var Event=require("../events"),cfg=require("../../../pbx_config"),pbx_db=require("../pbx_db"),pbx_api=require("../api/pbx_api.js"),pbx_logger=require("../logger/pbx_logger.js"),express=require("express"),dt=require("../common/datetime.js"),agentcdr=require("../agentCdr"),agent_processor=require("../agent_processor"),awsS3=require("../s3/awsS3.js"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv");const exec=require("child_process")["exec"];var logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,awsS3=new awsS3,dbOutput="",dbSMEid="",api=new pbx_api,agentCdrPrefix=cfg.agentCdr.path+"/"+cfg.agentCdr.title,agentCdrWriter=(logger.log("DEB",0,"agent_outgoing","Debug: Initializing Agent CDRs ("+agentCdrPrefix+")"),new agentcdr(agentCdrPrefix));function AgentOutgoingCall(E){logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [AgentOutgoingCall]"),this.state_name="user_agent_state",logger.log("DEB",E.channel.id,"agent_outgoing","Current State ["+E.currentState+"] Update to ==> [dialing]"),E.currentState="dialing",E.dialStatus="NOANSWER";E.totalHoldDuration=0,this.enter=function(){var r,d,e;new pbx_db;function c(){logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [start_playback]"),"YOUR_CALL_IMPT_TO_US"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing","IVR STATE (YOUR_CALL_IMPT_TO_US)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing","Going to play media["+current_sound+"]"),r=null,E.gmediaFile=current_sound,r=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},r,function(e,n){e&&logger.log("ERR",E.channel.id,"agent_outgoing","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing","channel not available")):"YOUR_CALL_IMPT_TO_US_15SEC"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing","IVR STATE (YOUR_CALL_IMPT_TO_US_15SEC)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call_15sec+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing","Going to play media["+current_sound+"]"),r=null,E.gmediaFile=current_sound,r=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},r,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing","channel not available")):"YOUR_CALL_GET_RECORDED"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing","IVR STATE (YOUR_CALL_GET_RECORDED)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_get_recorded+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing","Going to play media["+current_sound+"]"),r=null,E.gmediaFile=current_sound,r=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},r,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing","channel not available")):logger.log("ERR",E.channel.id,"agent_outgoing","Invalid ivr state! ("+E.user_ivr_state+")")}function s(e){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [on_playback_finished]"),console.log(e),r&&r.id==e.playback.id&&E.channel&&(logger.log("DEB",E.channel.id,"agent_outgoing","Played Promot ("+e.playback.media_uri+") finished"),1==E.jinglePlayFlag&&"1"==E.jinglePlayPermission&&(logger.log("DEB",E.channel.id,"agent_outgoing","SME jingle play instead of tringg tringg"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.jingle+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing","Going to play media["+current_sound+"]"),r=null,E.gmediaFile=current_sound,r=E.client.Playback(),E.jinglePlayBack=r,logger.log("DEB",E.channel.id,"agent_outgoing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},r,function(e,n){e?logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e):(logger.log("DEB",E.channel.id,"agent_outgoing","playing jingle...."),E.jinglePlayFlag=!0)}):logger.log("DEB",E.channel.id,"agent_outgoing","channel not available")),"YOUR_CALL_IMPT_TO_US"==E.user_ivr_state?(E.client.removeListener("PlaybackFinished",s),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_IMPT_TO_US_15SEC"==E.user_ivr_state?(E.client.removeListener("PlaybackFinished",s),"1"==E.firststickyAgentFlag&&(E.hardStickyAPIcallFlag=!0),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_GET_RECORDED"==E.user_ivr_state&&(logger.log("IMP",E.channel.id,"agent_outgoing","on_playback_finished: ("+e+")"),console.log(e),1!=E.mainLegDinit?logger.log("IMP",E.channel.id,"agent_outgoing","on YOUR_CALL_GET_RECORDED media finished, originate call to customer."):logger.log("IMP",E.channel.id,"agent_outgoing","mainLegDinit :true, ignore originate call to agent")))}function u(){logger.log("DEB",E.channel.id,"agent_outgoing","cleanup request.."),E.channel.removeListener("ChannelHangupRequest",h),"1"==E.isAgentFreeNow?(E.isAgentFreeNow="0",logger.log("DEB",E.channel.id,"agent_outgoing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E)):logger.log("DEB",E.channel.id,"agent_outgoing","have already freed the agent."),null!=E.agentChannel&&(logger.log("DEB",E.channel.id,"agent_outgoing","removeListener of ChannelDtmfReceived"),E.agentChannel.removeListener("ChannelDtmfReceived",_))}function _(e,n){switch(logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [on_dtmf]"),e.digit){case"*":E.transDtmf=e.digit,E.user_ivr_state="TRANSFER_CASE_DTMF";break;case"#":"0"==E.transHoldFlag?(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(g,1e3*cfg.timer.call_hold_reminder_to_agent_timer),"0"!=E.dbMusicOnHoldPrompt?(logger.log("DEB",E.channel.id,"agent_outgoing","Hold (custom) class "+E.smeID),E.startMohClass=E.smeID):(E.startMohClass="Default",logger.log("DEB",E.channel.id,"agent_outgoing","Hold (default) class")),E.client.channels.startMoh({channelId:E.channel.id,mohClass:E.startMohClass},function(e){e?logger.log("ERR",E.channel.id,"agent_outgoing","["+this.state_name+"]: error while HOLD startMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_outgoing","Customer ON HOLD startMoh now..."),E.transHoldFlag="1")})):(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing","lets clear the timer objReminderCallHoldToAgent"),clearTimeout(E.objReminderCallHoldToAgent),logger.log("DEB",E.channel.id,"agent_outgoing","UnHold (default)"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_outgoing","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_outgoing","Channel UNHOLD now..."),E.transHoldFlag="0")}));case"1":"*"==E.transDtmf&&"TRANSFER_CASE_DTMF"==E.user_ivr_state&&(E.transDtmf=E.transDtmf+e.digit,logger.log("DEB",E.channel.id,"agent_outgoing","group DTMF("+E.transDtmf+")"),"*1"==E.transDtmf?("0"==E.transHoldFlag&&("0"!=E.dbMusicOnHoldPrompt?(logger.log("DEB",E.channel.id,"agent_outgoing","Hold (custom)"),E.startMohClass=E.smeID):(E.startMohClass="Default",logger.log("DEB",E.channel.id,"agent_outgoing","Hold (default)")),E.client.channels.startMoh({channelId:E.channel.id,mohClass:E.startMohClass},function(e){e?logger.log("ERR",E.channel.id,"agent_outgoing","["+this.state_name+"]: error while HOLD startMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_outgoing","Customer ON HOLD startMoh now..."),E.transHoldFlag="1")})),E.transType="UNATTENDANT_CALL_TRANSFER",E.user_ivr_state="req_UNATTENDANT_CALL_TRANSFER",E.dialedLeg.removeListener("ChannelStateChange",m),E.dialedLeg.removeListener("ChannelDtmfReceived",_),E.dialedLeg.removeListener("ChannelHangupRequest",h),E.dialedLeg.removeListener("PlaybackFinished",s),E.client.removeListener("PlaybackFinished",s),E.transAgentWriteCdrFlag=!1,logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => TRANSFER]"),E.state_machine.change_state(Event.TRANSFER)):logger.log("DEB",E.channel.id,"agent_outgoing","invalid group DTMF("+E.transDtmf+")"))}}function h(e,n){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [on_hangup]"),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),E.CustomerConnectedDuration=E.AgentConnectedDuration,"none"==E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("IMP",E.channel.id,"agent_outgoing","Init [cleanup]"),u(),E.client.removeListener("PlaybackFinished",s),"0"<E.agentRingingTime?logger.log("DEB",E.channel.id,"agent_outgoing","dont change state to HANGUP"):(logger.log("DEB",E.channel.id,"agent_outgoing","lets change state to HANGUP"),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => HANGUP]"),E.state_machine.change_state(Event.HANGUP))}function g(){logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [hold_call_reminder]"),logger.log("DEB",E.channel.id,"timer [hold_call_notification] expired! & transHoldFlag("+E.transHoldFlag+")"),"1"==E.transHoldFlag&&(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(g,1e3*cfg.timer.call_hold_reminder_to_agent_timer))}function D(){logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [agent_ringing_time_expired]"),logger.log("IMP",E.channel.id,"agent_outgoing","Init [dialed.hangup]"),E.dialedLeg.hangup(function(e){})}function m(e,n){"Up"==n.state?(logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [Up]"),logger.log("DEB",E.channel.id,"agent_outgoing","Up:  "+n.id),E.dialedLegInit=!0,logger.log("DEB",E.channel.id,"agent_outgoing","set dialedLegInit true"),E.CustomerConnectedStartTime=dateTime.getAgentDateTime(),E.jinglePlayBack&&1==E.jinglePlayFlag&&E.channel&&(logger.log("DEB",E.channel.id,"agent_transfer","stopping jingle playing "),E.jinglePlayBack.stop(),E.jinglePlayFlag=!1)):"Ringing"==n.state?(logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [Ringing]"),E.AgentRingingDuration="0",E.AgentRingingStartTime=dateTime.getAgentDateTime(),logger.log("DEB",E.channel.id,"agent_outgoing","Ringing:  "+n.id),logger.log("IMP",E.channel.id,"agent_outgoing","dialedLegState Changed ["+E.dialedLegState+" => ringing]"),E.dialedLegState="ringing",logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing","Ringing: time "+E.AgentRingingStartTime),logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")):logger.log("IMP",E.channel.id,"agent_outgoing","ON Event ["+n.state+"]")}logger.log("DEB",E.channel.id,"agent_outgoing","Entering user_agent_state: user_agent_state"),E.ringTime=0,E.ccEndNode="CCG_"+E.allocated_agent+"_"+E.ringTime+"_"+E.dialStatus,E.client.on("PlaybackFinished",s),"FAILED_TRANSFER_CASE"!=E.user_ivr_state?(d=function(e,n,g){var t,a,i,o,l;e?logger.log("ERR",E.channel.id,"agent_outgoing","Error thrown at url call"+e):("1"==g.status&&0<g.data.agent_details.length?(E.idealAgentStatus=g.data.agent_details[0].status,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentStatus:"+E.idealAgentStatus),E.idealAgentID=g.data.agent_details[0].agent_id,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentID:"+E.idealAgentID),E.idealAgentName=g.data.agent_details[0].agent_name,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentName:"+E.idealAgentName),E.idealAgentNumber=g.data.agent_details[0].agent_mobile,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentNumber:"+E.idealAgentNumber),E.stickyAgentFlag=g.data.agent_details[0].sticky_agent,logger.log("DEB",E.channel.id,"agent_outgoing","stickyAgentFlag:"+E.stickyAgentFlag),E.idealAgentMasking=g.data.agent_details[0].agent_masking,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentMasking:"+E.idealAgentMasking),E.idealAgentGroup=g.data.agent_details[0].group_name,logger.log("DEB",E.channel.id,"agent_outgoing","idealAgentGroup:"+E.idealAgentGroup),E.agentWebrtcFlag=g.data.agent_details[0].webrtc_flag,logger.log("DEB",E.channel.id,"agent_outgoing","agentWebrtcFlag:"+E.agentWebrtcFlag)):(E.idealAgentStatus="0",E.idealAgentID="0",E.idealAgentNumber="0",E.stickyAgentFlag="0",E.idealAgentMasking="0",E.idealAgentGroup="0",E.agentWebrtcFlag="0"),logger.log("AGENTCDR",E.channel.id,"agent_outgoing","getFreeAgent response Agent - Name("+E.idealAgentName+") Number("+E.idealAgentNumber+") Email() SMEID("+E.smeID+") Status("+E.idealAgentStatus+")  queue_name("+E.gflowQueueName+") queue_id("+E.gflowQueueId+") SessionId("+E.callSessionId+")"),g.data&&g.data.call_reason?(E.callRouteReason=g.data.call_reason,logger.log("DEB",E.channel.id,"agent_outgoing","callRouteReason:"+E.callRouteReason)):logger.log("DEB",E.channel.id,"agent_outgoing","callRouteReason not in result.data.call_reason"),g.data&&g.data.customer_sticky?(E.customerStickyFlag=g.data.customer_sticky,logger.log("DEB",E.channel.id,"agent_outgoing","customerStickyFlag:"+E.customerStickyFlag)):logger.log("DEB",E.channel.id,"agent_outgoing","customer_sticky not in result.data.customer_sticky"),logger.log("DEB",E.channel.id,"agent_outgoing","API Status:"+g.status),logger.log("DEB",E.channel.id,"agent_outgoing","API Message:"+g.message),logger.log("DEB",E.channel.id,"agent_outgoing","Agent Number("+E.idealAgentNumber),logger.log("DEB",E.channel.id,"agent_outgoing","Agent ID("+E.idealAgentID),logger.log("DEB",E.channel.id,"agent_outgoing","Agent Group("+E.idealAgentGroup),logger.log("DEB",E.channel.id,"agent_outgoing","Agent Status("+E.idealAgentStatus),logger.log("DEB",E.channel.id,"agent_outgoing","Agent Masking("+E.idealAgentMasking),logger.log("DEB",E.channel.id,"agent_outgoing","Agent Sticky("+E.stickyAgentFlag),logger.log("DEB",E.channel.id,"agent_outgoing","Customer Sticky("+E.customerStickyFlag),"1"==E.idealAgentStatus?(E.callpatchedAgentId="1",E.callpatchedAgentName="",E.isAgentFreeNow="1",E.triedAgentList.push({agentNumber:E.idealAgentNumber,agentId:E.idealAgentID}),E.triedAgentListV2.push(E.idealAgentID),E.idealAgentFlag="1",logger.log("DEB",E.channel.id,"agent_outgoing","Marking Agent Bussy AgentNumber("+E.idealAgentNumber+") Group("+E.idealAgentGroup+"), Agent Bussy Flag("+E.idealAgentFlag+")"),"0"==E.customerStickyFlag?logger.log("DEB",E.channel.id,"agent_outgoing","Sticky [NO_STICKY_AENT] and (idle) AgentNumber("+E.idealAgentNumber+") Group("+E.idealAgentGroup+")"):"1"==E.customerStickyFlag?logger.log("DEB",E.channel.id,"agent_outgoing","Sticky [AGENT_LOOSELY_BIND] and (idle) AgentNumber("+E.idealAgentNumber+") Group("+E.idealAgentGroup+")"):"2"==E.customerStickyFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","Sticky [AGENT_STRICTLY_BIND] and (idle) AgentNumber("+E.idealAgentNumber+") Group("+E.idealAgentGroup+")"),E.firststickyAgentFlag="1"):logger.log("ERR",E.channel.id,"agent_outgoing","!invalid senario, AgentNumber("+E.idealAgentNumber+") Group("+E.idealAgentGroup+")"),1!=E.mainLegDinit?(logger.log("DEB",E.channel.id,"agent_outgoing","Calling updateLiveCall.......for agent number only"),logger.log("DEB",E.channel.id,"agent_outgoing","Calling updateLiveCall......%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% updateLiveCall %%%%%%%%%%%%%%%%%%%%%%%%%%%% .with delay of 1 sec. for 0"),setTimeout(function(){agentProcessor.updateLiveCall(E,"0")},1e3),logger.log("DEB",E.channel.id,"agent_outgoing","appendAgent to already tried list idealAgentNumber("+E.idealAgentNumber+"), idealAgentID("+E.idealAgentID+"), catDescAgent("+E.catDescAgent+")"),E.channel,e=E.idealAgentID,g=E.idealAgentNumber,l=E.catDescAgent,logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [appendAgent]"),logger.log("DEB",E.channel.id,"agent_outgoing","appendAgent to array: AgentID("+e+"), catDesc("+l+"), AgentNumber("+g+")"),E.apiAgentArray.push({AgentId:E.idealAgentID,AgentNumber:E.idealAgentNumber,AgentDesc:l}),logger.log("DEB",E.channel.id,"agent_outgoing","Agent "+E.idealAgentNumber+" is safe to patch a call"),logger.log("DEB",E.channel.id,"agent_outgoing","###################### Dial Status is : "+E.dialStatus),logger.log("DEB",E.channel.id,"agent_outgoing","###################### cc EndNode is : "+E.ccEndNode),E.allocated_agent=E.idealAgentNumber,logger.log("DEB",E.channel.id,"agent_outgoing","Will Dial the allocated Agent:"+E.allocated_agent),logger.log("DEB",E.channel.id,"agent_outgoing","and bridge the customer number:"+E.channel.caller.number),E.channel.caller.number,E.allocated_agent,logger.log("DEB",E.channel.id,"agent_outgoing","and bridge the customer number:"+E.channel.caller.number),o=E.channel,logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [originate]"),1!=E.mainLegDinit&&(e="",g=E.client.Channel(),l="kommuno",logger.log("DEB",E.channel.id,"agent_outgoing","for testing only-------dialed:("+g+"), dialed.id:"+g.id),"1"==E.smemasking?(E.channel.caller.number,Math.floor(9e5*Math.random()+1e5),e=E.outVirtualNo,logger.log("DEB",E.channel.id,"agent_outgoing","Masking [ON] setting CLI as ["+e+"]")):(e=E.outVirtualNo,logger.log("DEB",E.channel.id,"agent_outgoing","Masking [OFF] setting CLI as ["+e+"]")),E.AgentStartCallTime=dateTime.getAgentDateTime(),E.agentChannel=g,E.agentDialed=g,E.dialedLeg=g,a=t="",a=(t="1"==E.agentWebrtcFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","webrtc wala agent ("+E.allocated_agent+")"),logger.log("DEB",E.channel.id,"agent_outgoing","webrtc Agent before ("+E.allocated_agent+")"),i=E.allocated_agent.replace("+",""),logger.log("DEB",E.channel.id,"agent_outgoing","webrtc Agent after ("+i+")"),"SIP/"+i+"@"+cfg.webrtc_server.ip+":"+cfg.webrtc_server.port):(logger.log("DEB",E.channel.id,"agent_outgoing","phone wala agent ("+E.allocated_agent+")"),"SIP/"+E.allocated_agent+"@"+cfg.asterisk.gw_ipaddr_port),"ed_"+l+" <"+e+">"),logger.log("DEB",E.channel.id,"agent_outgoing","Current State ["+E.currentState+"] Update to ==> [originating]"),logger.log("DEB",E.channel.id,"agent_outgoing","callerID("+a+"), endPoint("+t+")"),E.currentState="originating",E.originateTime=(new Date).getTime(),logger.log("DEB",E.channel.id,"agent_outgoing","Call Originate Time :  "+E.originateTime),E.waitingTime=(E.originateTime-E.startTime)/1e3,logger.log("DEB",E.channel.id,"agent_outgoing"," Waiting  time : [",E.waitingTime,"]"),g.on("ChannelDestroyed",function(e,n){var g,t,a;logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [ChannelDestroyed - dialed]"),logger.log("DEB",E.channel.id,"agent_outgoing","Inside dialed ChannelDestroyed, Current State ["+E.currentState+"]"),logger.log("DEB",E.channel.id,"agent_outgoing","Agent call disconneced, Reason_Cause["+e.cause+"] Cause_Msg["+e.cause_txt+"]"),E.agentCallResponseCode=e.cause,E.agentCallResponseMsg=e.cause_txt,E.jinglePlayBack&&1==E.jinglePlayFlag&&"1"==E.jinglePlayPermission&&E.channel&&(logger.log("DEB",E.channel.id,"agent_transfer","stopping jingle playing "),E.jinglePlayBack.stop(),E.jinglePlayFlag=!1),logger.log("DEB",E.channel.id,"agent_outgoing","AgentRingingDuration is("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing","AgentConnectedStartTime is("+E.AgentConnectedStartTime+")"),E.AgentConnectedEndTime=dateTime.getAgentDateTime(),(E.AgentRingingDuration<="0"||isNaN(E.AgentRingingDuration))&&(E.AgentRingingEndTime=dateTime.getAgentDateTime(),E.AgentRingingDuration=dateTime.calculateDuration(E.AgentRingingStartTime,E.AgentRingingEndTime)),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing","AgentRingingDuration("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),E.dialedLegDinit=!0,E.AgentConnectedStartTime="0",logger.log("DEB",E.channel.id,"agent_outgoing","set dialedLegDinit true"),"1"==E.callRecordingStatus&&0==E.transferLegInit?"mp3"==cfg.system.recording_type?(g=E.callRecordedFile+".wav",t="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",e=cfg.media.rec_dir+"/"+E.callRecordedFile+".mp3",logger.log("DEB",E.channel.id,"agent_outgoing","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),a=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(a)||fs.mkdirSync(a),E.callRecordedFile=t,logger.log("DEB",E.channel.id,"agent_outgoing","RECORDING Successfully Done ("+t+")"),E.callRecordedFile=t,E.s3RecordedFile=e,E.s3RecordedFileWav=t,logger.log("DEB",E.channel.id,"agent_outgoing","storing recording in DB.."),E.callDirection="INCOMING",e=`ffmpeg -i ${E.s3RecordedFileWav} -codec:a libmp3lame -qscale:a 2 `+E.s3RecordedFile,exec(e,(e,n,g)=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing","ENCODING failed, store failed recording. SaveS3FailedRecordingData error"+e),logger.log("ERR",E.channel.id,"agent_outgoing","file encoded failed to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_outgoing","file encoded to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,E.s3RecordedFile,function(e,n){e?(logger.log("ERR",E.channel.id,"agent_outgoing","UPLOAD s3Upload failed, store for retry"),logger.log("DEB",E.channel.id,"agent_outgoing","UPLOAD to s3 failed, store failed recording. SaveS3FailedRecordingData"),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_outgoing","UPLOAD S3 s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,E.callDirection="INCOMING",logger.log("DEB",E.channel.id,"agent_outgoing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFileWav,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing","DELETE error while deleting wav recording file("+E.s3RecordedFileWav+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing","DELETE successfully deleting wav recording file"+E.s3RecordedFileWav)}),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing","DELETE error while deleting mp3 recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing","DELETE successfully deleting mp3 recording file"+E.s3RecordedFile)}))}))})):"wav"==cfg.system.recording_type?(logger.log("DEB",E.channel.id,"agent_outgoing","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),g=E.callRecordedFile+".wav",t="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",logger.log("DEB",E.channel.id,"agent_outgoing","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),a=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(a)||fs.mkdirSync(a),E.callRecordedFile=t,logger.log("DEB",E.channel.id,"agent_outgoing","RECORDING Successfully Done ("+t+")"),E.callRecordedFile=t,E.s3RecordedFile=t,logger.log("DEB",E.channel.id,"agent_outgoing","storing recording in DB.."),E.callDirection="INCOMING",null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,g,function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","s3Upload failed"):(logger.log("DEB",E.channel.id,"agent_outgoing","s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,logger.log("DEB",E.channel.id,"agent_outgoing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing","DELETE error while deleting wav recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing","DELETE successfully deleting wav recording file"+E.s3RecordedFile)}))})):logger.log("ERR",E.channel.id,"agent_outgoing","invalid recording format mentioned in cfg file. ("+cfg.system.recording_type+")"):"1"==E.callRecordingStatus&&1==E.transferLegInit?logger.log("DEB",E.channel.id,"agent_outgoing","active recording, but transfer call going on.."):logger.log("DEB",E.channel.id,"agent_outgoing","No active recording!"),E.callInfo="incoming",logger.log("DEB",E.channel.id,"agent_outgoing","generating agent cdr for agent call reporting (failed to answer)"),0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),"1"==E.isAgentFreeNow?(E.isAgentFreeNow="0",logger.log("DEB",E.channel.id,"agent_outgoing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;"):logger.log("DEB",E.channel.id,"agent_outgoing","have already freed the agent."),"originating"==E.currentState?(E.disconnectStatus="NOANSWER",logger.log("DEB",E.channel.id,"agent_outgoing",""),logger.log("DEB",E.channel.id,"agent_outgoing","Init [cleanup]"),logger.log("DEB",E.channel.id,"agent_outgoing",""),u(),"0"==E.transferCallFlag&&(E.client.removeListener("PlaybackFinished",s),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL))):"feedback"==E.currentState?logger.log("DEB",E.channel.id,"agent_outgoing"," call current state is : ["+E.currentState+"]"):("user_disconnect"!=E.currentState&&(logger.log("DEB",E.channel.id,"agent_outgoing","Current State ["+E.currentState+"] Update to ==> [agent_disconnect]"),E.currentState="agent_disconnect",E.disconnectStatus="AGENT",logger.log("DEB",E.channel.id,"agent_outgoing"," Call disconnected by agent")),logger.log("DEB",o.id,"agent_outgoing","mainLegInit("+E.mainLegInit+") & mainLegDinit("+E.mainLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.mainLegState("+E.mainLegState+")"),"connected"!=E.mainLegState&&"originating"!=E.mainLegState&&"ringing"!=E.mainLegState||1!=E.mainLegInit||0!=E.mainLegDinit||"0"!=E.transferCallFlag?logger.log("DEB",o.id,"agent_outgoing","do nothing for mainLeg from dialed...."):(logger.log("DEB",o.id,"agent_outgoing","mainLeg.hangup from dialed...."),E.mainLegDinit=!0,E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",o.id,"agent_outgoing","Error while hangup main leg."+e):logger.log("DEB",o.id,"agent_outgoing","success while hangup main leg.")})),logger.log("DEB",o.id,"agent_outgoing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),logger.log("DEB",o.id,"agent_outgoing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),"connected"==E.transferLegState&&1==E.transferLegInit&&0==E.transferLegDinit?(0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),"1"==E.isAgentFreeNow?(E.isAgentFreeNow="0",logger.log("DEB",E.channel.id,"agent_outgoing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;"):logger.log("DEB",E.channel.id,"agent_outgoing","have already freed the agent.")):logger.log("DEB",o.id,"agent_outgoing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg"))}),i="channel:"+E.channel.id,logger.log("DEB",E.channel.id,"agent_outgoing","stasisApp app name: "+cfg.asterisk.stasisApp),E.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:i},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","Error while subscribing for channel!!"):logger.log("DEB",E.channel.id,"agent_outgoing","Subscribed for channel successfully")}),g.on("Ring",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [Ring - dialed]")}),E.client.channels.ring({channelId:E.channel.id},function(e){e&&logger.log("['ERR', call.channel.id, 'agent_outgoing', "+this.state_name+"]: Error in Ringing Function "+e)}),g.on("ChannelHold",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [ChannelHold - dialed]")}),g.on("ChannelUnhold",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [ChannelUnhold - dialed]")}),g.on("StasisStart",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [StasisStart - dialed]"),E.dialedLegInit=!0,logger.log("DEB",E.channel.id,"agent_outgoing","set dialedLegInit true"),E.AgentConnectedStartTime=dateTime.getAgentDateTime(),E.AgentRingingEndTime=dateTime.getAgentDateTime(),E.AgentRingingDuration=dateTime.calculateDuration(E.AgentRingingStartTime,E.AgentRingingEndTime),logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing","AgentRingingDuration("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),E.callpatchedAgentId=E.idealAgentID,E.callpatchedAgentName=E.idealAgentName,E.callStatusCRM="patched",logger.log("DEB",E.channel.id,"agent_outgoing","Stasis Started for dialed:  "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing","Stasis Started time : "+E.startTime),a=o,i=n,logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [createBridge]"),E.client.Bridge().create({type:"mixing,dtmf_events,proxy_media"},function(e,n){if(logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [bridge.create]"),e)throw e;var g,t;E.aBridge=n,E.callBridgeId=n.id,E.callBridge=n,logger.log("DEB",E.channel.id,"agent_outgoing","[[[[[[[[[[[[[[[[[[[[[Created bridge: "+n.id+"]]]]]]]]]]]]]]]]]]]]]]]]]]"),logger.log("DEB",E.channel.id,"agent_outgoing","Created bridge: "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing","addChannelsToBridge "+a.id+" to bridge "+n.id),e=a,g=i,t=n,logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [addChannelsToBridge]"),logger.log("DEB",E.channel.id,"agent_outgoing","Adding channel "+e.name+" and dialed channel "+g.name+" to bridge: "+t.id),t.addChannel({channel:[e.id,g.id]},function(e){if(e)throw e;E.BRIDGED_TIME=(new Date).getTime();e=parseInt(E.BRIDGED_TIME/1e3);logger.log("DEB",E.channel.id,"agent_outgoing","Time When bridged:"+e)}),E.AgentStatus=0,"2"==E.callanswerFlag&&(E.callanswerFlag="1"),logger.log("DEB",E.channel.id,"agent_outgoing","++++++++++++ callfinalStatus "+E.callfinalStatus+" "),"1"==E.callfinalStatus&&(logger.log("DEB",E.channel.id,"agent_outgoing","setting  0 to ++++++++++++ callfinalStatus "+E.callfinalStatus+" "),E.callfinalStatus="0"),"none"==E.callpatchedAgentGroup&&(E.callpatchedAgentGroup=E.idealAgentGroup),"none"==E.callpatchedAgentId&&(E.callpatchedAgentId=E.idealAgentID,E.callpatchedAgentName=E.idealAgentName),"false"==E.callcdrFlag&&(E.callcdrFlag="true;"),"1"==E.smerecording&&(logger.log("DEB",E.channel.id,"agent_outgoing","enabled SME recording flag: "+E.smerecording),E.callRecordedFileRaw="AIR_"+E.channel.id+"_"+Date.now().toString(),E.callRecordedFile=E.smeID+"/"+E.callRecordedFileRaw,E.client.bridges.record({bridgeId:n.id,format:"wav",name:E.callRecordedFile,ifExists:"overwrite"},e=>{}),logger.log("DEB",E.channel.id,"agent_outgoing","Recording started @: "+E.callRecordedFile),E.callRecordingStatus="1")}),logger.log("DEB",E.channel.id,"agent_outgoing","Calling updateLiveCall......%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% updateLiveCall %%%%%%%%%%%%%%%%%%%%%%%%%%%% .with delay of 1 sec. for 1"),setTimeout(function(){agentProcessor.updateLiveCall(E,"1")},1e3),logger.log("DEB",E.channel.id,"agent_outgoing","Dialed Channel Answered. Inform CRM about patching here"),E.dialStatus="ANSWER",logger.log("DEB",E.channel.id,"agent_outgoing","Dial Status change to  : ["+E.dialStatus+"]"),E.answerTime=(new Date).getTime();var a,i,n=parseInt(E.answerTime/1e3),n=(logger.log("DEB",E.channel.id,"agent_outgoing","answer time is "+n),E.ringTime=(E.answerTime-E.originateTime)/1e3,E.ccEndNode="CCG_"+E.allocated_agent+"_"+E.ringTime+"_"+E.dialStatus,logger.log("DEB",E.channel.id,"agent_outgoing"," Ring Time : ["+E.ringTime+"] and CCG endNode is : ["+E.ccEndNode+"]"),E.gliveEvents.includes("evt_connected")),n=(logger.log("DEB",E.channel.id,"agent_outgoing","returnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"+n),1==n?(E.activeEvents="evt_connected",logger.log("DEB",E.channel.id,"agent_outgoing","SME("+E.smeID+") subscribed for evt_connected"),logger.log("DEB",E.channel.id,"agent_outgoing","initiate live event................................................."),agentProcessor.funcNotifyCrmIncomingCalls(E,"evt_connected")):logger.log("DEB",E.channel.id,"agent_outgoing","SME("+E.smeID+") not subscribed for evt_connected from("+E.gliveEvents+")"),E.gliveEvents.includes("evt_popup"));logger.log("DEB",E.channel.id,"agent_outgoing","returnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"+n),1==n?(E.activeEvents="evt_popup",logger.log("DEB",E.channel.id,"agent_outgoing","SME("+E.smeID+") subscribed for evt_popup"),logger.log("DEB",E.channel.id,"agent_outgoing","initiate live event................................................."),agentProcessor.funcNotifyCrmIncomingCalls(E,"evt_popup")):logger.log("DEB",E.channel.id,"agent_outgoing","SME("+E.smeID+") not subscribed for evt_popup from("+E.gliveEvents+")"),logger.log("DEB",E.channel.id,"agent_outgoing","Will send notify for channel "+o.id+" and caller: "+o.caller.number),logger.log("DEB",E.channel.id,"agent_outgoing","Current State ["+E.currentState+"] Update to ==> [patched]"),E.currentState="patched"}),g.on("StasisEnd",function(e,n){logger.log("DEB",E.channel.id,"agent_outgoing",""),logger.log("DEB",E.channel.id,"agent_outgoing","ON Event [StasisEnd-dialed] "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing",""),E.dialedLegDinit=!0,logger.log("DEB",E.channel.id,"agent_outgoing","set dialedLegDinit true"),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),E.CustomerConnectedDuration=E.AgentConnectedDuration,"none"==E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("DEB",o.id,"agent_outgoing","mainLegInit("+E.mainLegInit+") & mainLegDinit("+E.mainLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.mainLegState("+E.mainLegState+")"),"connected"!=E.mainLegState&&"originating"!=E.mainLegState&&"ringing"!=E.mainLegState||1!=E.mainLegInit||0!=E.mainLegDinit||"0"!=E.transferCallFlag?logger.log("DEB",o.id,"agent_outgoing","do nothing for mainLeg from dialed...."):(logger.log("DEB",o.id,"agent_outgoing","mainLeg.hangup from dialed...."),E.mainLegDinit=!0,E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",o.id,"agent_outgoing","Error while hangup main leg."+e):logger.log("DEB",o.id,"agent_outgoing","success while hangup main leg.")})),logger.log("DEB",o.id,"agent_outgoing","dialedLegDinit("+E.dialedLegDinit+") & transferLegDinit("+E.transferLegDinit+") & mainLegDinit("+E.mainLegDinit+")"),1==E.dialedLegDinit&&1==E.transferLegDinit&&0==E.mainLegDinit?(logger.log("DEB",o.id,"agent_outgoing","mainLeg.hangup from dialed...."),E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",o.id,"agent_outgoing","Error while hangup main leg."+e):logger.log("DEB",o.id,"agent_outgoing","success while hangup main leg.")})):logger.log("DEB",o.id,"agent_outgoing",".. do nothing for mainLeg from dialed...."),logger.log("DEB",o.id,"agent_outgoing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),"connected"==E.transferLegState&&1==E.transferLegInit&&0==E.transferLegDinit?(0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),"1"==E.isAgentFreeNow?(E.isAgentFreeNow="0",logger.log("DEB",E.channel.id,"agent_outgoing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;"):logger.log("DEB",E.channel.id,"agent_outgoing","have already freed the agent.")):logger.log("DEB",o.id,"agent_outgoing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg")}),"1"==E.jinglePlayPermission?(logger.log("DEB",E.channel.id,"agent_outgoing","SME jingle play instead of tringg tringg"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.jingle+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing","Going to play media["+current_sound+"]"),r=null,E.gmediaFile=current_sound,r=E.client.Playback(),E.jinglePlayBack=r,logger.log("DEB",E.channel.id,"agent_outgoing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},r,function(e,n){e?logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e):(logger.log("DEB",E.channel.id,"agent_outgoing","playing jingle...."),E.jinglePlayFlag=!0)}):logger.log("DEB",E.channel.id,"agent_outgoing","channel not available")):logger.log("DEB",E.channel.id,"agent_outgoing","SME play default tringg tringg"),g.originate({endpoint:t,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:a},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing","Error in dialing("+e+")"):(E.dialedLegOriginate=!0,logger.log("IMP",E.channel.id,"agent_outgoing","Init [dialed.originate..]"),logger.log("IMP",E.channel.id,"agent_outgoing","dialedLegState Changed ["+E.dialedLegState+" => originating]"),E.dialedLegState="originating",E.dialedLegDinit=!1,E.writeCdrFlag=!1,E.dialedLeg.on("ChannelStateChange",m),E.dialedLeg.on("ChannelDtmfReceived",_),E.dialedLeg.on("ChannelHangupRequest",h),E.dialedLeg.on("PlaybackFinished",s),"0"<E.agentRingingTime?(logger.log("DEB",E.channel.id,"agent_outgoing","[agent_ringing_time_expired] timer initialize.. for("+E.agentRingingTime+") seconds"),E.objReminderAgentRingingTimeExpired=setTimeout(D,1e3*E.agentRingingTime)):logger.log("DEB",E.channel.id,"agent_outgoing","keeo default agent ringing time.."))}))):(logger.log("DEB",E.channel.id,"agent_outgoing","initOnHangup("+E.initOnHangup+") already activated, NO originate new call to agent."),"1"==E.isAgentFreeNow?(E.idealAgentFlag="0",logger.log("DEB",E.channel.id,"agent_outgoing","calling makeAgentFree to mark the tried agent idle, racecondition"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),E.isAgentFreeNow="0",agentProcessor.freeAgent(E)):(logger.log("DEB",E.channel.id,"agent_outgoing","have already freed the agent."),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%fir be free karo%%%%%%%%%%%%%%%%%%%% freeAgent 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%")))):"offhour"==E.callRouteReason&&"1"!=E.idealAgentStatus?(logger.log("DEB",E.channel.id,"agent_outgoing","No Agent Schedule this time...(offhour)"),E.ivrFailedCallReason="offhour",logger.log("DEB",E.channel.id,"agent_outgoing","smevoicemail("+E.smevoicemail+")"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME_OFFHOUR":E.callvoicemailstate="OFF_HOURS",logger.log("DEB",E.channel.id,"agent_outgoing","callvoicemailstate Update to ==> ["+E.callvoicemailstate+"]"),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):"0"==E.idealAgentStatus?(logger.log("IMP",E.channel.id,"agent_outgoing","all agents tried "+E.queue_tried_counter+" times, "+E.queue_limit+" is the limit"),E.queue_tried_counter>=E.queue_limit?(logger.log("DEB",E.channel.id,"agent_outgoing","Agent Queue limit "+E.queue_limit+" exceeded"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",E.ivrFailedCallReason="retry expire",E.client.removeListener("PlaybackFinished",s),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):"YOUR_CALL_IMPT_TO_US"!=E.user_ivr_state?(E.user_ivr_state="YOUR_CALL_IMPT_TO_US",c(E.currentState)):(E.user_ivr_state="AGENT_RESETING",logger.log("DEB",E.channel.id,"agent_outgoing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo.. reset agent array till limint exceeds..before:"+E.queue_tried_counter),E.queue_tried_counter++,logger.log("DEB",E.channel.id,"agent_outgoing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo.. reset agent array till limint exceeds..after:"+E.queue_tried_counter),E.apiAgentArray=[],logger.log("DEB",E.channel.id,"agent_outgoing","getNextFreeAgent with Param, smeID:"+E.smeID),logger.log("DEB",E.channel.id,"agent_outgoing","[GET_FREE_AGENT] for smeID("+E.smeID+")"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT other ne time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),1!=E.mainLegDinit?api.getFreeAgent(E.channel.id,E.smeID,E.catDescAgent,E.smeAlgorithm,E.calling_number,"",E.smeStickyAlgo,E.assigned_agent_sticky_type,E.assigned_agent_id,E.agentAssignedVNAgentID,E.callSessionId,E.gflowQueueName,E.gflowQueueId,d):logger.log("DEB",E.channel.id,"agent_outgoing","mainLegDinit :true, ignore getFreeAgent"))):"1"==E.idealAgentStatus||"busy"!=E.callRouteReason||"2"!=E.customerStickyFlag&&"1"!=E.firststickyAgentFlag?(logger.log("ERR",E.channel.id,"agent_outgoing","Error while getting agents for sme"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",E.client.removeListener("PlaybackFinished",s),logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):(logger.log("DEB",E.channel.id,"agent_outgoing","all agents tried "+E.queue_tried_counter+" times, "+E.queue_limit+" is the limit"),E.queue_tried_counter>=E.queue_limit?(logger.log("DEB",E.channel.id,"agent_outgoing","Agent Queue limit "+E.queue_limit+" exceeded"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):(E.firststickyAgentFlag="1",E.user_ivr_state="YOUR_CALL_IMPT_TO_US_15SEC",logger.log("DEB",E.channel.id,"agent_outgoing","queue_tried_counter++"),logger.log("DEB",E.channel.id,"agent_outgoing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....before:"+E.queue_tried_counter),E.queue_tried_counter++,logger.log("DEB",E.channel.id,"agent_outgoing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....after:"+E.queue_tried_counter),c(E.currentState))))},"0"==E.initOnHangup?(logger.log("DEB",E.channel.id,"agent_outgoing",E.firststickyAgentFlag+"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++call.firststickyAgentFlag"),"1"==E.firststickyAgentFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","very special sticky case... should come only here is hard sticky"),logger.log("DEB",E.channel.id,"agent_outgoing","customerStickyFlag("+E.customerStickyFlag+"), firststickyAgentFlag("+E.firststickyAgentFlag+"), idealAgentStatus("+E.idealAgentStatus+"),"),1==E.hardStickyAPIcallFlag?(logger.log("DEB",E.channel.id,"agent_outgoing","Check sticky agent status"),logger.log("DEB",E.channel.id,"agent_outgoing","[GET_AGENT_STATUS] for smeID("+E.smeID+")"),api.getFreeAgent(E.channel.id,E.smeID,E.catDescAgent,E.smeAlgorithm,E.calling_number,"",E.smeStickyAlgo,E.assigned_agent_sticky_type,E.assigned_agent_id,E.agentAssignedVNAgentID,E.callSessionId,E.gflowQueueName,E.gflowQueueId,d),E.hardStickyAPIcallFlag=!1):E.queue_tried_counter>=E.queue_limit?(logger.log("DEB",E.channel.id,"agent_outgoing","Agent Queue limit "+E.queue_limit+" exceeded (hard sticky only)"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",logger.log("IMP",E.channel.id,"agent_outgoing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):(E.firststickyAgentFlag="1",E.user_ivr_state="YOUR_CALL_IMPT_TO_US_15SEC",logger.log("DEB",E.channel.id,"agent_outgoing","queue_tried_counter++"),logger.log("DEB",E.channel.id,"agent_outgoing","hard sticky only @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....before:"+E.queue_tried_counter),E.queue_tried_counter++,logger.log("DEB",E.channel.id,"agent_outgoing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hard sticky only@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....after:"+E.queue_tried_counter),c(E.currentState))):(e=function(e,n,g){logger.log("IMP",E.channel.id,"agent_outgoing","Internal Function [getUsedAgentList]"),logger.log("DEB",E.channel.id,"agent_outgoing","getUsedAgentList: AgentID("+e+"), catDesc("+g+"), AgentNumber("+n+")"),logger.log("DEB",E.channel.id,"agent_outgoing","apiAgentArray length ("+E.apiAgentArray.length+")");for(var t="",a=0;a<E.apiAgentArray.length;a++){var i=E.apiAgentArray[a];t=t+","+i.AgentId}return logger.log("DEB",E.channel.id,"agent_outgoing","already tried agents List ("+t+")"),t}((E.channel.id,E.idealAgentID),E.idealAgentNumber,E.catDescAgent),logger.log("DEB",E.channel.id,"agent_outgoing","getUsedAgentList return ("+e+")"),""!=e?(logger.log("DEB",E.channel.id,"agent_outgoing","Calling API getNextFreeAgent with Param, smeID:"+E.smeID+" & type:1 & agentList:("+e+")"),logger.log("DEB",E.channel.id,"agent_outgoing","[GET_FREE_AGENT] for smeID("+E.smeID+") & type:1 & agentList:("+e+")"),logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT other time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),1!=E.mainLegDinit?api.getFreeAgent(E.channel.id,E.smeID,E.catDescAgent,E.smeAlgorithm,E.calling_number,e,E.smeStickyAlgo,E.assigned_agent_sticky_type,E.assigned_agent_id,E.agentAssignedVNAgentID,E.callSessionId,E.gflowQueueName,E.gflowQueueId,d):logger.log("DEB",E.channel.id,"agent_outgoing","mainLegDinit :true, ignore getFreeAgent")):(logger.log("DEB",E.channel.id,"agent_outgoing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT first time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),logger.log("DEB",E.channel.id,"agent_outgoing","Calling API getNextFreeAgent with Param, smeID:"+E.smeID+" & type:1"),logger.log("DEB",E.channel.id,"agent_outgoing","[GET_FREE_AGENT] for smeID("+E.smeID+") & type:1"),1!=E.mainLegDinit?api.getFreeAgent(E.channel.id,E.smeID,E.catDescAgent,E.smeAlgorithm,E.calling_number,"",E.smeStickyAlgo,E.assigned_agent_sticky_type,E.assigned_agent_id,E.agentAssignedVNAgentID,E.callSessionId,E.gflowQueueName,E.gflowQueueId,d):logger.log("DEB",E.channel.id,"agent_outgoing","mainLegDinit :true, ignore getFreeAgent")))):logger.log("DEB",E.channel.id,"agent_outgoing","No Hunting of free agent because initOnHangup:"+E.initOnHangup+" is already activated.")):(logger.log("DEB",E.channel.id,"agent_outgoing","FAILED_TRANSFER_CASE back to dialed session"),E.dialedLeg.on("ChannelDtmfReceived",_),E.dialedLeg.on("PlaybackFinished",s),E.dialedLeg.on("ChannelStateChange",m),E.dialedLeg.on("ChannelHangupRequest",h))}}module.exports=AgentOutgoingCall;