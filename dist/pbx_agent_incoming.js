var Event=require("./events"),cfg=require("../../pbx_config"),pbx_db=require("./pbx_db"),pbx_api=require("./api/pbx_api"),pbx_logger=require("./logger/pbx_logger"),agent_processor=require("./agent_processor"),express=require("express"),dt=require("./common/datetime"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv"),logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,dbOutput="",dbSMEid="",api=new pbx_api;function AgentOutgoingCall(c){this.state_name="agent_incoming_state",logger.log("DEB",c.channel.id,"agent_incoming","Current State ["+c.currentState+"] Update to ==> [dialing]"),c.currentState="dialing",c.dialStatus="NOANSWER";c.totalHoldDuration=0,this.enter=function(){var g,n,i,e,a;new pbx_db;function t(){var i;logger.log("DEB",c.channel.id,"agent_incoming","cleanup request.."),c.channel.removeListener("ChannelHangupRequest",l),"1"===c.idealAgentFlag&&(logger.log("DEB",c.channel.id,"agent_incoming","calling makeAgentFree to mark the tried agent idle"),i=c.channel,logger.log("DEB",c.channel.id,"agent_incoming","inside function makeAgentFree"),logger.log("DEB",c.channel.id,"agent_incoming","Calling function setAgentFree with Param AgentID("+c.idealAgentID+"), catDesc("+c.catDescAgent+"), agentrepeatid(0), flag(2), alogtype("+c.smeAlgorithm+")"),api.setAgentFree(c.channel.id,c.idealAgentID,c.catDescAgent,"0","2",c.smeAlgorithm,c.callSessionId,function(n,e,a){n||200!=e.statusCode?logger.log("ERR",i,"agent_incoming","Error thrown at url call:"+n):(logger.log("DEB",i,"agent_incoming","HTML Received: "+a),e=a.split("="),c.idealAgentFlag="0","'idle'"===e[1]?logger.log("DEB",i,"agent_incoming","AgentID("+c.idealAgentID+") AgentGroup("+c.idealAgentGroup+") AgentNumber("+c.idealAgentNumber+") marked free!"):logger.log("ERR",i,"agent_incoming","AgentID("+c.idealAgentID+") AgentGroup("+c.idealAgentGroup+") AgentNumber("+c.idealAgentNumber+") failed to marked free!"))})),null!=c.agentChannel&&(logger.log("DEB",c.channel.id,"agent_incoming","removeListener of ChannelDtmfReceived"),c.agentChannel.removeListener("ChannelDtmfReceived",o))}function o(n,e){logger.log("IMP",c.channel.id,"agent_incoming","Inside on_dtmf"),"#"===n.digit&&(console.log("Accepted recording",c.callRecordedFile),c.client.recordings.stop({recordingName:c.callRecordedFile},function(n){}))}function l(n,e){logger.log("IMP",c.channel.id,"agent_incoming","Inside on_hangup"),t(),logger.log("DEB",c.channel.id,"agent_incoming","State-Machine Update to ==> [Event.HANGUP]"),c.state_machine.change_state(Event.HANGUP)}logger.log("IMP",c.channel.id,"agent_incoming","Entering agent_incoming_state: agent_incoming_state"),c.channel.on("ChannelHangupRequest",l),c.ringTime=0,c.ccEndNode="CCG_"+c.allocated_agent+"_"+c.ringTime+"_"+c.dialStatus,c.callMode="IVR_OUT",c.customer_number.length>=cfg.outgoing.number_length?(logger.log("DEB",c.channel.id,"agent_incoming","Called Number: "+c.customer_number),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"dialstatus",value:c.dialstatus},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: error in setchannelvar: "+n):logger.log("DEB",c.channel.id,"agent_incoming","Channel Variable dialstatus set!!")}),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"ccEndNode",value:c.ccEndNode},function(n){n?logger.log("IMP",c.channel.id,"agent_incoming","["+this.state_name+"]: error in setchannelvar: "+n):logger.log("IMP",c.channel.id,"agent_incoming","Channel Variable ccEndNode set!!")}),logger.log("DEB",c.channel.id,"agent_incoming","Agent "+c.idealAgentNumber+" is safe to patch a call"),logger.log("IMP",c.channel.id,"agent_incoming","###################### Dial Status is : "+c.dialStatus),logger.log("IMP",c.channel.id,"agent_incoming","###################### cc EndNode is : "+c.ccEndNode),c.allocated_agent="+91"+c.customer_number,logger.log("DEB",c.channel.id,"agent_incoming","Will Dial the allocated Agent:"+c.allocated_agent),logger.log("DEB",c.channel.id,"agent_incoming","and bridge the customer number:"+c.channel.caller.number),c.channel.caller.number,c.allocated_agent,g=c.channel,n="",i=c.client.Channel(),c.AgentStartCallTime=dateTime.getAgentDateTime(),n=c.called_number,c.agentChannel=i,e="SIP/"+c.allocated_agent+"@"+cfg.asterisk.gw_ipaddr_port,n="ed_wringg <"+n+">",logger.log("DEB",c.channel.id,"agent_incoming","Current State ["+c.currentState+"] Update to ==> [originating]"),c.currentState="originating",logger.log("DEB",c.channel.id,"agent_incoming","callerID("+n+"), endPoint("+e+")"),c.originateTime=(new Date).getTime(),logger.log("DEB",c.channel.id,"agent_incoming","Call Originate Time :  "+c.originateTime),c.waitingTime=(c.originateTime-c.startTime)/1e3,logger.log("DEB",c.channel.id,"agent_incoming"," Waiting  time : [",c.waitingTime,"]"),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"waitingTime",value:c.waitingTime},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar "+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible SetChannelVar set!")}),g.on("StasisEnd",function(n,e){var a;logger.log("DEB",c.channel.id,"agent_incoming"," channel inside StasisEnd  "+e.id),logger.log("DEB",c.channel.id,"agent_incoming"," Inside channel StasisEnd function "),a=i,logger.log("DEB",c.channel.id,"agent_incoming","Channel "+e.name+" left our application, hanging up dialed channel: "+a.name),a.hangup(function(n){})}),i.on("ChannelDestroyed",function(n,e){var a,i;logger.log("DEB",c.channel.id,"agent_incoming","Inside dialed ChannelDestroyed, Current State ["+c.currentState+"]"),logger.log("DEB",c.channel.id,"agent_incoming","Agent call disconneced, Reason_Cause["+n.cause+"] Cause_Msg["+n.cause_txt+"]"),c.agentCallResponseCode=n.cause,c.agentCallResponseMsg=n.cause_txt,"1"===c.callRecordingStatus?(a="/var/spool/asterisk/recording/"+c.callRecordedFile+".wav",i=cfg.media.rec_dir+"/"+c.callRecordedFile+".wav",c.callRecordedFile=i,logger.log("DEB",c.channel.id,"agent_incoming","active recording, need to stop!"),console.log("Accepted recording",c.callRecordedFile),c.client.recordings.stop({recordingName:c.callRecordedFile},function(n){}),n=cfg.media.rec_dir+"/"+c.smeID,fs.existsSync(n)||fs.mkdirSync(n),mv(a,i,function(n){if(n)throw n;logger.log("DEB",c.channel.id,"agent_incoming","RECORDING Successfully Move from: ("+a+") to: ("+i+")"),c.callRecordedFile=i,c.s3RecordedFile=i,logger.log("DEB",c.channel.id,"agent_outgoing","storing recording in DB.."),c.callDirection="OUTGOING",agentProcessor.UploadS3Recording(c)})):logger.log("DEB",c.channel.id,"agent_incoming","No active recording!"),logger.log("DEB",c.channel.id,"agent_incoming","generating agent cdr for agent call reporting (failed to answer)"),agentProcessor.logAgentCdr(c),"originating"==c.currentState?(c.disconnectStatus="NOANSWER",t(),logger.log("DEB",c.channel.id,"agent_incoming","State-Machine Update to ==> [Event.END_PLAY]"),c.state_machine.change_state(Event.END_PLAY)):"feedback"==c.currentState?logger.log("DEB",c.channel.id,"agent_incoming"," call current state is : ["+c.currentState+"]"):("user_disconnect"!=c.currentState&&(logger.log("DEB",c.channel.id,"agent_incoming","Current State ["+c.currentState+"] Update to ==> [agent_disconnect]"),c.currentState="agent_disconnect",c.disconnectStatus="AGENT",logger.log("DEB",c.channel.id,"agent_incoming"," Call disconnected by agent")),n=g,logger.log("DEB",c.channel.id,"agent_incoming","Dialed channel "+e.name+" has been hung up, hanging up channel "+n.name),n.hangup(function(n){}))}),a="channel:"+c.channel.id,logger.log("DEB",c.channel.id,"agent_incoming","stasisApp app name: "+cfg.asterisk.stasisApp),c.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:a},function(n,e){n?logger.log("ERR",c.channel.id,"agent_incoming","Error while subscribing for channel!!"):logger.log("DEB",c.channel.id,"agent_incoming","Subscribed for channel successfully")}),i.on("Ring",function(n,e){logger.log("DEB",c.channel.id,"agent_incoming","Ringing!!!")}),c.client.channels.ring({channelId:c.channel.id},function(n){n&&logger.log("['ERR', call.channel.id, 'agent_incoming', "+this.state_name+"]: Error in Ringing Function "+n)}),i.on("ChannelHold",function(n,e){c.holdEventTime=(new Date).getTime(),logger.log("DEB",c.channel.id,"agent_incoming","#####   ChannelHold and time is : !!!"+c.holdEventTime)}),i.on("ChannelUnhold",function(n,e){logger.log("DEB",c.channel.id,"agent_incoming"," #####   ChannelUnhold !!!"),c.currentTime=(new Date).getTime();var a=c.currentTime-c.holdEventTime;logger.log("DEB",c.channel.id,"agent_incoming","current time is : "+c.currentTime),c.totalHoldDuration=c.totalHoldDuration+a,logger.log("DEB",c.channel.id,"agent_incoming","current hold Duration is : "+a),logger.log("DEB",c.channel.id,"agent_incoming","holdDuration "+c.totalHoldDuration/1e3),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"holdTime",value:c.totalHoldDuration/1e3},function(n){n&&logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar "+n)})}),i.on("StasisStart",function(n,e){var i,t,l;logger.log("DEB",c.channel.id,"agent_incoming","Stasis Started for dialed:  "+e.id),logger.log("DEB",c.channel.id,"agent_incoming","Stasis Started time : "+c.startTime),i=g,t=e,l=c.client.Bridge(),t.on("StasisEnd",function(n,e){var a;logger.log("DEB",c.channel.id,"agent_incoming","Inside dialed StasisEnd function"),"none"===c.calldisconnectedBy&&(c.calldisconnectedBy="agent_disconnect"),a=e,e=l,logger.log("DEB",c.channel.id,"agent_incoming","Dialed channel "+a.name+" has left our application, destroying bridge "+a.name),e.destroy(function(n){if(n)throw n;logger.log("DEB",c.channel.id,"agent_incoming","Bridge Destroyed !"+a.name)})}),t.on("ChannelDtmfReceived",o),t.answer(function(n){if(n)throw n;logger.log("DEB",c.channel.id,"agent_incoming","Dialed Channel Answered. Inform CRM about patching here"),c.dialStatus="ANSWER",logger.log("DEB",c.channel.id,"agent_incoming","Dial Status change to  : ["+c.dialStatus+"]"),c.answerTime=(new Date).getTime();var e,a,n=parseInt(c.answerTime/1e3);logger.log("DEB",c.channel.id,"agent_incoming","answer time is "+n),c.ringTime=(c.answerTime-c.originateTime)/1e3,c.ccEndNode="CCG_"+c.allocated_agent+"_"+c.ringTime+"_"+c.dialStatus,logger.log("DEB",c.channel.id,"agent_incoming"," Ring Time : ["+c.ringTime+"] and CCG endNode is : ["+c.ccEndNode+"]"),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"ringTime",value:c.ringTime},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar: "+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible ringTime set! ")}),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"callPatchTime",value:n},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar: "+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible callPatchTime set! ")}),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"dialStatus",value:c.dialStatus},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar(%s)"+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible dialStatus set! ")}),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"ccEndNode",value:c.ccEndNode},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar: "+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible ccEndNode set! ")}),c.client.channels.setChannelVar({channelId:c.channel.id,variable:"waitingStatus",value:"ANSWERED"},function(n){n?logger.log("ERR",c.channel.id,"agent_incoming","["+this.state_name+"]: Error in SetChannelVar(%s)"+n):logger.log("DEB",c.channel.id,"agent_incoming","["+this.state_name+"]: Channel Varaible waitingStatus set! ")}),n=i,e=t,a=l,logger.log("DEB",c.channel.id,"agent_incoming","Adding channel "+n.name+" and dialed channel "+e.name+" to bridge: "+a.id),a.addChannel({channel:[n.id,e.id]},function(n){if(n)throw n;c.BRIDGED_TIME=(new Date).getTime();n=parseInt(c.BRIDGED_TIME/1e3);logger.log("DEB",c.channel.id,"agent_incoming","Time When bridged:"+n)}),logger.log("DEB",c.channel.id,"agent_incoming","Will send notify for channel "+i.id+" and caller: "+i.caller.number),logger.log("DEB",c.channel.id,"agent_incoming","Current State ["+c.currentState+"] Update to ==> [patched]"),c.currentState="patched"}),l.create({type:"mixing,dtmf_events,proxy_media"},function(n,e){if(n)throw n;logger.log("DEB",c.channel.id,"agent_incoming","Created bridge: "+e.id),c.AgentStatus=0,c.callanswerFlag="2","1"===c.callfinalStatus&&(c.callfinalStatus="0"),"none"===c.callpatchedAgentGroup&&(c.callpatchedAgentGroup=c.idealAgentGroup),"none"===c.callpatchedAgentId&&(c.callpatchedAgentId=c.idealAgentID),"false"===c.callcdrFlag&&(c.callcdrFlag="true;"),"1"===c.smerecording&&(logger.log("IMP",c.channel.id,"agent_incoming","enabled SME recording flag: "+c.smerecording),c.callRecordedFileRaw="AOR_"+c.channel.id+"_"+Date.now().toString(),c.callRecordedFile=c.smeID+"/"+c.callRecordedFileRaw,c.client.bridges.record({bridgeId:e.id,format:"wav",name:c.callRecordedFile},n=>{}),logger.log("IMP",c.channel.id,"agent_incoming","Recording started @: "+c.callRecordedFile),c.callRecordingStatus="1")})}),i.originate({endpoint:e,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:n},function(n,e){n&&logger.log("ERR",c.channel.id,"agent_incoming","Error in dialing("+n+")")})):logger.log("ERR",channel,"agent_incoming","Invalid number to make outgoing call ("+c.customer_number+")")}}module.exports=AgentOutgoingCall;